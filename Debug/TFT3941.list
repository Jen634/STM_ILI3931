
TFT3941.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e9c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b8  08003fa8  08003fa8  00004fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004960  08004960  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004960  08004960  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004960  08004960  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004960  08004960  00005960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004964  08004964  00005964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004968  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  2000005c  080049c4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  080049c4  00006830  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a436  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ded  00000000  00000000  000104bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  000122a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000758  00000000  00000000  00012c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017819  00000000  00000000  00013398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc90  00000000  00000000  0002abb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008453b  00000000  00000000  00036841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bad7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029cc  00000000  00000000  000badc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000bd78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f90 	.word	0x08003f90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003f90 	.word	0x08003f90

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <ILI9341_DrawFilledCircle>:
        }
    }
}
//  hàm vẽ giao diện hình tròn đặc
void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t r, uint16_t color)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b08b      	sub	sp, #44	@ 0x2c
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	4608      	mov	r0, r1
 8000a7e:	4611      	mov	r1, r2
 8000a80:	461a      	mov	r2, r3
 8000a82:	4623      	mov	r3, r4
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	4603      	mov	r3, r0
 8000a88:	80bb      	strh	r3, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	807b      	strh	r3, [r7, #2]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	803b      	strh	r3, [r7, #0]

	// Fast filled circle by drawing horizontal spans using FillRect.
	// For each y from -r..r compute x span and draw a horizontal line
	for (int dy = -((int)r); dy <= (int)r; dy++) {
 8000a92:	887b      	ldrh	r3, [r7, #2]
 8000a94:	425b      	negs	r3, r3
 8000a96:	61fb      	str	r3, [r7, #28]
 8000a98:	e03a      	b.n	8000b10 <ILI9341_DrawFilledCircle+0x9c>
		int dx = (int)(sqrt((double)(r * r - dy * dy)) + 0.5);
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	887a      	ldrh	r2, [r7, #2]
 8000a9e:	fb03 f202 	mul.w	r2, r3, r2
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	fb03 f303 	mul.w	r3, r3, r3
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fca0 	bl	80003f0 <__aeabi_i2d>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	4610      	mov	r0, r2
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f003 f974 	bl	8003da4 <sqrt>
 8000abc:	f04f 0200 	mov.w	r2, #0
 8000ac0:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <ILI9341_DrawFilledCircle+0xb0>)
 8000ac2:	f7ff fb49 	bl	8000158 <__adddf3>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	460b      	mov	r3, r1
 8000aca:	4610      	mov	r0, r2
 8000acc:	4619      	mov	r1, r3
 8000ace:	f7ff ffa9 	bl	8000a24 <__aeabi_d2iz>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	61bb      	str	r3, [r7, #24]
		int x0 = X - dx;
 8000ad6:	88fa      	ldrh	r2, [r7, #6]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]
		int w = dx * 2 + 1;
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
		int y = Y + dy;
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	69fa      	ldr	r2, [r7, #28]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
		if (w > 0) {
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dd0a      	ble.n	8000b0a <ILI9341_DrawFilledCircle+0x96>
			// bounds checked inside FillRect
			ILI9341_FillRect((uint16_t)x0, (uint16_t)y, (uint16_t)w, 1, color);
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	b298      	uxth	r0, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	b299      	uxth	r1, r3
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	883b      	ldrh	r3, [r7, #0]
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2301      	movs	r3, #1
 8000b06:	f000 fb4d 	bl	80011a4 <ILI9341_FillRect>
	for (int dy = -((int)r); dy <= (int)r; dy++) {
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	887b      	ldrh	r3, [r7, #2]
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	ddc0      	ble.n	8000a9a <ILI9341_DrawFilledCircle+0x26>
		}
	}
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3724      	adds	r7, #36	@ 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	bf00      	nop
 8000b24:	3fe00000 	.word	0x3fe00000

08000b28 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b0af      	sub	sp, #188	@ 0xbc
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	4611      	mov	r1, r2
 8000b32:	461a      	mov	r2, r3
 8000b34:	4603      	mov	r3, r0
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	81bb      	strh	r3, [r7, #12]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	80fb      	strh	r3, [r7, #6]
	if ((ch < 32) || (ch > 127)) return;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b1f      	cmp	r3, #31
 8000b44:	f240 80f4 	bls.w	8000d30 <ILI9341_DrawChar+0x208>
 8000b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f2c0 80ef 	blt.w	8000d30 <ILI9341_DrawChar+0x208>

	const uint8_t fOffset = font[0];
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
	const uint8_t fWidth = font[1];
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
	const uint8_t fHeight = font[2];
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	3302      	adds	r3, #2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
	const uint8_t fBPL = font[3];
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3303      	adds	r3, #3
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98

	const uint8_t *tempChar = &font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	3b20      	subs	r3, #32
 8000b7c:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 8000b80:	fb02 f303 	mul.w	r3, r2, r3
 8000b84:	3304      	adds	r3, #4
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	4413      	add	r3, r2
 8000b8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	uint8_t charWidth = tempChar[0];
 8000b8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	if (charWidth == 0) charWidth = fWidth;
 8000b98:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d103      	bne.n	8000ba8 <ILI9341_DrawChar+0x80>
 8000ba0:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8000ba4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	/* Clear background first (only the needed width) */
	ILI9341_DrawRectangle(X, Y, charWidth, fHeight, bgcolor);
 8000ba8:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000bb2:	b29c      	uxth	r4, r3
 8000bb4:	88f9      	ldrh	r1, [r7, #6]
 8000bb6:	89b8      	ldrh	r0, [r7, #12]
 8000bb8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	f000 fc84 	bl	80014cc <ILI9341_DrawRectangle>

	// Buffer per-column to send pixel runs faster. We'll prepare a column buffer of height fHeight
	// and for each column send the pixels as a vertical strip.
	uint16_t colbuf[64]; // supports up to 64 px height; for larger fonts we fallback to DrawPixel

	if (fHeight <= 64) {
 8000bc4:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000bc8:	2b40      	cmp	r3, #64	@ 0x40
 8000bca:	d85d      	bhi.n	8000c88 <ILI9341_DrawChar+0x160>
		for (int i = 0; i < charWidth; i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000bd2:	e052      	b.n	8000c7a <ILI9341_DrawChar+0x152>
			// build column
			for (int j = 0; j < fHeight; j++) {
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000bda:	e032      	b.n	8000c42 <ILI9341_DrawChar+0x11a>
				uint8_t z = tempChar[fBPL * i + (j >> 3) + 1];
 8000bdc:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8000be0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000be4:	fb03 f202 	mul.w	r2, r3, r2
 8000be8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000bec:	10db      	asrs	r3, r3, #3
 8000bee:	4413      	add	r3, r2
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000bf6:	4413      	add	r3, r2
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
				uint8_t b = 1 << (j & 0x07);
 8000bfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	2201      	movs	r2, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				colbuf[j] = (z & b) ? color : bgcolor;
 8000c10:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 8000c14:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8000c18:	4013      	ands	r3, r2
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <ILI9341_DrawChar+0xfe>
 8000c20:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	@ 0xc0
 8000c24:	e001      	b.n	8000c2a <ILI9341_DrawChar+0x102>
 8000c26:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	@ 0xc4
 8000c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	33b0      	adds	r3, #176	@ 0xb0
 8000c32:	443b      	add	r3, r7
 8000c34:	f823 2ca0 	strh.w	r2, [r3, #-160]
			for (int j = 0; j < fHeight; j++) {
 8000c38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000c42:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000c46:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbc6      	blt.n	8000bdc <ILI9341_DrawChar+0xb4>
			}
			// write this column as a w=1, h=fHeight block
			ILI9341_WritePixels(X + i, Y, 1, fHeight, colbuf);
 8000c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	89bb      	ldrh	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	b298      	uxth	r0, r3
 8000c5a:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	88f9      	ldrh	r1, [r7, #6]
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f000 fb1c 	bl	80012a8 <ILI9341_WritePixels>
		for (int i = 0; i < charWidth; i++) {
 8000c70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c74:	3301      	adds	r3, #1
 8000c76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000c7a:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000c82:	429a      	cmp	r2, r3
 8000c84:	dba6      	blt.n	8000bd4 <ILI9341_DrawChar+0xac>
 8000c86:	e054      	b.n	8000d32 <ILI9341_DrawChar+0x20a>
		}
	} else {
		// fallback: draw per-pixel
		for (int j=0; j < fHeight; j++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000c8e:	e048      	b.n	8000d22 <ILI9341_DrawChar+0x1fa>
			for (int i=0; i < charWidth; i++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000c96:	e039      	b.n	8000d0c <ILI9341_DrawChar+0x1e4>
				uint8_t z = tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1];
 8000c98:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8000c9c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000ca0:	fb03 f202 	mul.w	r2, r3, r2
 8000ca4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000ca8:	10db      	asrs	r3, r3, #3
 8000caa:	f003 031f 	and.w	r3, r3, #31
 8000cae:	4413      	add	r3, r2
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
				uint8_t b = 1 << (j & 0x07);
 8000cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
				if (( z & b ) != 0x00) {
 8000cd0:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8000cd4:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8000cd8:	4013      	ands	r3, r2
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d010      	beq.n	8000d02 <ILI9341_DrawChar+0x1da>
					ILI9341_DrawPixel(X+i, Y+j, color);
 8000ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	89bb      	ldrh	r3, [r7, #12]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b298      	uxth	r0, r3
 8000cec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	@ 0xc0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f000 fa27 	bl	8001150 <ILI9341_DrawPixel>
			for (int i=0; i < charWidth; i++) {
 8000d02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000d06:	3301      	adds	r3, #1
 8000d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000d0c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000d10:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbbf      	blt.n	8000c98 <ILI9341_DrawChar+0x170>
		for (int j=0; j < fHeight; j++) {
 8000d18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000d22:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000d26:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dbb0      	blt.n	8000c90 <ILI9341_DrawChar+0x168>
 8000d2e:	e000      	b.n	8000d32 <ILI9341_DrawChar+0x20a>
	if ((ch < 32) || (ch > 127)) return;
 8000d30:	bf00      	nop
				}
			}
		}
	}
}
 8000d32:	37b4      	adds	r7, #180	@ 0xb4
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd90      	pop	{r4, r7, pc}

08000d38 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	4611      	mov	r1, r2
 8000d44:	461a      	mov	r2, r3
 8000d46:	460b      	mov	r3, r1
 8000d48:	80fb      	strh	r3, [r7, #6]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	3301      	adds	r3, #1
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000d5c:	e02d      	b.n	8000dba <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	7818      	ldrb	r0, [r3, #0]
 8000d62:	88b9      	ldrh	r1, [r7, #4]
 8000d64:	88fa      	ldrh	r2, [r7, #6]
 8000d66:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	f7ff fed9 	bl	8000b28 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3b20      	subs	r3, #32
 8000d7c:	7ffa      	ldrb	r2, [r7, #31]
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	3304      	adds	r3, #4
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	4413      	add	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	1c9a      	adds	r2, r3, #2
 8000d94:	7fbb      	ldrb	r3, [r7, #30]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	da07      	bge.n	8000daa <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	3302      	adds	r3, #2
 8000da6:	80fb      	strh	r3, [r7, #6]
 8000da8:	e004      	b.n	8000db4 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8000daa:	7fbb      	ldrb	r3, [r7, #30]
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	4413      	add	r3, r2
 8000db2:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3301      	adds	r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1cd      	bne.n	8000d5e <ILI9341_DrawText+0x26>
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <showUARTLine>:

void showUARTLine(const char *line) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	6078      	str	r0, [r7, #4]
	
    ILI9341_DrawFilledCircle(100, 100, 100,000000);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2264      	movs	r2, #100	@ 0x64
 8000dd8:	2164      	movs	r1, #100	@ 0x64
 8000dda:	2064      	movs	r0, #100	@ 0x64
 8000ddc:	f7ff fe4a 	bl	8000a74 <ILI9341_DrawFilledCircle>
    ILI9341_DrawText(line, FONT3, 100, 100, 0xFFFF, 000000); // Green text on yellow background
 8000de0:	2300      	movs	r3, #0
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2364      	movs	r3, #100	@ 0x64
 8000dec:	2264      	movs	r2, #100	@ 0x64
 8000dee:	4904      	ldr	r1, [pc, #16]	@ (8000e00 <showUARTLine+0x34>)
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ffa1 	bl	8000d38 <ILI9341_DrawText>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	08003fc0 	.word	0x08003fc0

08000e04 <ILI9341_Select>:
#include <string.h>

extern SPI_HandleTypeDef hspi1; // defined in main.c

// Local helpers
static void ILI9341_Select(void)  { HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET); }
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <ILI9341_Select+0x14>)
 8000e0e:	f001 fb53 	bl	80024b8 <HAL_GPIO_WritePin>
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <ILI9341_Unselect>:
static void ILI9341_Unselect(void){ HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET); }
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	2201      	movs	r2, #1
 8000e22:	2101      	movs	r1, #1
 8000e24:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <ILI9341_Unselect+0x14>)
 8000e26:	f001 fb47 	bl	80024b8 <HAL_GPIO_WritePin>
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010c00 	.word	0x40010c00

08000e34 <ILI9341_DC_Command>:
static void ILI9341_DC_Command(void){ HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_RESET); }
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <ILI9341_DC_Command+0x14>)
 8000e3e:	f001 fb3b 	bl	80024b8 <HAL_GPIO_WritePin>
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40010c00 	.word	0x40010c00

08000e4c <ILI9341_DC_Data>:
static void ILI9341_DC_Data(void)   { HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET); }
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	2201      	movs	r2, #1
 8000e52:	2102      	movs	r1, #2
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <ILI9341_DC_Data+0x14>)
 8000e56:	f001 fb2f 	bl	80024b8 <HAL_GPIO_WritePin>
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40010c00 	.word	0x40010c00

08000e64 <ILI9341_WriteCmd>:

void ILI9341_WriteCmd(uint8_t cmd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  ILI9341_Select();
 8000e6e:	f7ff ffc9 	bl	8000e04 <ILI9341_Select>
  ILI9341_DC_Command();
 8000e72:	f7ff ffdf 	bl	8000e34 <ILI9341_DC_Command>
  HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000e76:	1df9      	adds	r1, r7, #7
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <ILI9341_WriteCmd+0x2c>)
 8000e80:	f001 ffc6 	bl	8002e10 <HAL_SPI_Transmit>
  ILI9341_Unselect();
 8000e84:	f7ff ffca 	bl	8000e1c <ILI9341_Unselect>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000178 	.word	0x20000178

08000e94 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t* buff, uint16_t len)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
  if(len == 0) return;
 8000ea0:	887b      	ldrh	r3, [r7, #2]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00d      	beq.n	8000ec2 <ILI9341_WriteData+0x2e>
  ILI9341_Select();
 8000ea6:	f7ff ffad 	bl	8000e04 <ILI9341_Select>
  ILI9341_DC_Data();
 8000eaa:	f7ff ffcf 	bl	8000e4c <ILI9341_DC_Data>
  HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <ILI9341_WriteData+0x38>)
 8000eb8:	f001 ffaa 	bl	8002e10 <HAL_SPI_Transmit>
  ILI9341_Unselect();
 8000ebc:	f7ff ffae 	bl	8000e1c <ILI9341_Unselect>
 8000ec0:	e000      	b.n	8000ec4 <ILI9341_WriteData+0x30>
  if(len == 0) return;
 8000ec2:	bf00      	nop
}
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000178 	.word	0x20000178

08000ed0 <ILI9341_SetAddrWindow>:

// Set address window (column/page)
static void ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	4623      	mov	r3, r4
 8000ee0:	80fb      	strh	r3, [r7, #6]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80bb      	strh	r3, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	807b      	strh	r3, [r7, #2]
 8000eea:	4613      	mov	r3, r2
 8000eec:	803b      	strh	r3, [r7, #0]
  uint8_t data[4];
  // Column addr (0x2A)
  ILI9341_WriteCmd(0x2A);
 8000eee:	202a      	movs	r0, #42	@ 0x2a
 8000ef0:	f7ff ffb8 	bl	8000e64 <ILI9341_WriteCmd>
  data[0] = (x0 >> 8) & 0xFF; data[1] = x0 & 0xFF;
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	733b      	strb	r3, [r7, #12]
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	737b      	strb	r3, [r7, #13]
  data[2] = (x1 >> 8) & 0xFF; data[3] = x1 & 0xFF;
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	0a1b      	lsrs	r3, r3, #8
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	73bb      	strb	r3, [r7, #14]
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	73fb      	strb	r3, [r7, #15]
  ILI9341_WriteData(data, 4);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ffba 	bl	8000e94 <ILI9341_WriteData>

  // Page addr (0x2B)
  ILI9341_WriteCmd(0x2B);
 8000f20:	202b      	movs	r0, #43	@ 0x2b
 8000f22:	f7ff ff9f 	bl	8000e64 <ILI9341_WriteCmd>
  data[0] = (y0 >> 8) & 0xFF; data[1] = y0 & 0xFF;
 8000f26:	88bb      	ldrh	r3, [r7, #4]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	733b      	strb	r3, [r7, #12]
 8000f30:	88bb      	ldrh	r3, [r7, #4]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	737b      	strb	r3, [r7, #13]
  data[2] = (y1 >> 8) & 0xFF; data[3] = y1 & 0xFF;
 8000f36:	883b      	ldrh	r3, [r7, #0]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	73bb      	strb	r3, [r7, #14]
 8000f40:	883b      	ldrh	r3, [r7, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	73fb      	strb	r3, [r7, #15]
  ILI9341_WriteData(data, 4);
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ffa1 	bl	8000e94 <ILI9341_WriteData>

  // Memory write (0x2C) will follow by the caller
  ILI9341_WriteCmd(0x2C);
 8000f52:	202c      	movs	r0, #44	@ 0x2c
 8000f54:	f7ff ff86 	bl	8000e64 <ILI9341_WriteCmd>
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}

08000f60 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	@ 0x38
 8000f64:	af00      	add	r7, sp, #0
  // Reset sequence
  HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f6c:	4871      	ldr	r0, [pc, #452]	@ (8001134 <ILI9341_Init+0x1d4>)
 8000f6e:	f001 faa3 	bl	80024b8 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000f72:	2014      	movs	r0, #20
 8000f74:	f000 ff38 	bl	8001de8 <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f7e:	486d      	ldr	r0, [pc, #436]	@ (8001134 <ILI9341_Init+0x1d4>)
 8000f80:	f001 fa9a 	bl	80024b8 <HAL_GPIO_WritePin>
  HAL_Delay(150);
 8000f84:	2096      	movs	r0, #150	@ 0x96
 8000f86:	f000 ff2f 	bl	8001de8 <HAL_Delay>

  // Basic init commands (small, common subset)
  ILI9341_WriteCmd(0xEF);
 8000f8a:	20ef      	movs	r0, #239	@ 0xef
 8000f8c:	f7ff ff6a 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t efdata[] = {0x03,0x80,0x02}; ILI9341_WriteData(efdata, sizeof(efdata));
 8000f90:	4a69      	ldr	r2, [pc, #420]	@ (8001138 <ILI9341_Init+0x1d8>)
 8000f92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	8019      	strh	r1, [r3, #0]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	0c12      	lsrs	r2, r2, #16
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff73 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xCF);
 8000fae:	20cf      	movs	r0, #207	@ 0xcf
 8000fb0:	f7ff ff58 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t cfdata[] = {0x00,0xC1,0x30}; ILI9341_WriteData(cfdata, sizeof(cfdata));
 8000fb4:	4a61      	ldr	r2, [pc, #388]	@ (800113c <ILI9341_Init+0x1dc>)
 8000fb6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	8019      	strh	r1, [r3, #0]
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	0c12      	lsrs	r2, r2, #16
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fca:	2103      	movs	r1, #3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff61 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xED);
 8000fd2:	20ed      	movs	r0, #237	@ 0xed
 8000fd4:	f7ff ff46 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t eddata[] = {0x64,0x03,0x12,0x81}; ILI9341_WriteData(eddata, sizeof(eddata));
 8000fd8:	4b59      	ldr	r3, [pc, #356]	@ (8001140 <ILI9341_Init+0x1e0>)
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff56 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xE8);
 8000fe8:	20e8      	movs	r0, #232	@ 0xe8
 8000fea:	f7ff ff3b 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t e8data[] = {0x85,0x00,0x78}; ILI9341_WriteData(e8data, sizeof(e8data));
 8000fee:	4a55      	ldr	r2, [pc, #340]	@ (8001144 <ILI9341_Init+0x1e4>)
 8000ff0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	8019      	strh	r1, [r3, #0]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	0c12      	lsrs	r2, r2, #16
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001004:	2103      	movs	r1, #3
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff44 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xCB);
 800100c:	20cb      	movs	r0, #203	@ 0xcb
 800100e:	f7ff ff29 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t cbdata[] = {0x39,0x2C,0x00,0x34,0x02}; ILI9341_WriteData(cbdata, sizeof(cbdata));
 8001012:	4a4d      	ldr	r2, [pc, #308]	@ (8001148 <ILI9341_Init+0x1e8>)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101c:	6018      	str	r0, [r3, #0]
 800101e:	3304      	adds	r3, #4
 8001020:	7019      	strb	r1, [r3, #0]
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	2105      	movs	r1, #5
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff33 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xF7);
 800102e:	20f7      	movs	r0, #247	@ 0xf7
 8001030:	f7ff ff18 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t f7data[] = {0x20}; ILI9341_WriteData(f7data, sizeof(f7data));
 8001034:	2320      	movs	r3, #32
 8001036:	773b      	strb	r3, [r7, #28]
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	2101      	movs	r1, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff28 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xEA);
 8001044:	20ea      	movs	r0, #234	@ 0xea
 8001046:	f7ff ff0d 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t eadata[] = {0x00,0x00}; ILI9341_WriteData(eadata, sizeof(eadata));
 800104a:	2300      	movs	r3, #0
 800104c:	833b      	strh	r3, [r7, #24]
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	2102      	movs	r1, #2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff1d 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xC0); // Power control
 800105a:	20c0      	movs	r0, #192	@ 0xc0
 800105c:	f7ff ff02 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t c0data[] = {0x23}; ILI9341_WriteData(c0data, sizeof(c0data));
 8001060:	2323      	movs	r3, #35	@ 0x23
 8001062:	753b      	strb	r3, [r7, #20]
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2101      	movs	r1, #1
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff12 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xC1);
 8001070:	20c1      	movs	r0, #193	@ 0xc1
 8001072:	f7ff fef7 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t c1data[] = {0x10}; ILI9341_WriteData(c1data, sizeof(c1data));
 8001076:	2310      	movs	r3, #16
 8001078:	743b      	strb	r3, [r7, #16]
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	2101      	movs	r1, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff07 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xC5); // VCOM control
 8001086:	20c5      	movs	r0, #197	@ 0xc5
 8001088:	f7ff feec 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t c5data[] = {0x3e, 0x28}; ILI9341_WriteData(c5data, sizeof(c5data));
 800108c:	f642 033e 	movw	r3, #10302	@ 0x283e
 8001090:	81bb      	strh	r3, [r7, #12]
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	2102      	movs	r1, #2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fefb 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xC7); // VCOM control 2
 800109e:	20c7      	movs	r0, #199	@ 0xc7
 80010a0:	f7ff fee0 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t c7data[] = {0x86}; ILI9341_WriteData(c7data, sizeof(c7data));
 80010a4:	2386      	movs	r3, #134	@ 0x86
 80010a6:	723b      	strb	r3, [r7, #8]
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2101      	movs	r1, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fef0 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0x36); // Memory Access Control 
 80010b4:	2036      	movs	r0, #54	@ 0x36
 80010b6:	f7ff fed5 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t madctl = 0x40; ILI9341_WriteData(&madctl, 1);  //0x48 // MX, BGR 0x40 MX flag like trước nhưng BGR bit = 0 -> RGB
 80010ba:	2340      	movs	r3, #64	@ 0x40
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	2101      	movs	r1, #1
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fee6 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0x3A); // Pixel Format
 80010c8:	203a      	movs	r0, #58	@ 0x3a
 80010ca:	f7ff fecb 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t pixfmt = 0x55; // 16-bit/pixel
 80010ce:	2355      	movs	r3, #85	@ 0x55
 80010d0:	71bb      	strb	r3, [r7, #6]
  ILI9341_WriteData(&pixfmt, 1);
 80010d2:	1dbb      	adds	r3, r7, #6
 80010d4:	2101      	movs	r1, #1
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fedc 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xB1);
 80010dc:	20b1      	movs	r0, #177	@ 0xb1
 80010de:	f7ff fec1 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t b1data[] = {0x00,0x18}; ILI9341_WriteData(b1data, sizeof(b1data));
 80010e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010e6:	80bb      	strh	r3, [r7, #4]
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2102      	movs	r1, #2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fed1 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xB6); // Display Function Control
 80010f2:	20b6      	movs	r0, #182	@ 0xb6
 80010f4:	f7ff feb6 	bl	8000e64 <ILI9341_WriteCmd>
  uint8_t b6data[] = {0x08,0x82,0x27}; ILI9341_WriteData(b6data, sizeof(b6data));
 80010f8:	4a14      	ldr	r2, [pc, #80]	@ (800114c <ILI9341_Init+0x1ec>)
 80010fa:	463b      	mov	r3, r7
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	4611      	mov	r1, r2
 8001100:	8019      	strh	r1, [r3, #0]
 8001102:	3302      	adds	r3, #2
 8001104:	0c12      	lsrs	r2, r2, #16
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	463b      	mov	r3, r7
 800110a:	2103      	movs	r1, #3
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fec1 	bl	8000e94 <ILI9341_WriteData>

  ILI9341_WriteCmd(0x11); // Sleep out
 8001112:	2011      	movs	r0, #17
 8001114:	f7ff fea6 	bl	8000e64 <ILI9341_WriteCmd>
  HAL_Delay(120);
 8001118:	2078      	movs	r0, #120	@ 0x78
 800111a:	f000 fe65 	bl	8001de8 <HAL_Delay>

  ILI9341_WriteCmd(0x29); // Display on
 800111e:	2029      	movs	r0, #41	@ 0x29
 8001120:	f7ff fea0 	bl	8000e64 <ILI9341_WriteCmd>
  HAL_Delay(20);
 8001124:	2014      	movs	r0, #20
 8001126:	f000 fe5f 	bl	8001de8 <HAL_Delay>
}
 800112a:	bf00      	nop
 800112c:	3738      	adds	r7, #56	@ 0x38
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40010c00 	.word	0x40010c00
 8001138:	08003fa8 	.word	0x08003fa8
 800113c:	08003fac 	.word	0x08003fac
 8001140:	81120364 	.word	0x81120364
 8001144:	08003fb0 	.word	0x08003fb0
 8001148:	08003fb4 	.word	0x08003fb4
 800114c:	08003fbc 	.word	0x08003fbc

08001150 <ILI9341_DrawPixel>:

// Draw a single pixel (uses set window + 2-byte color)
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
 800115a:	460b      	mov	r3, r1
 800115c:	80bb      	strh	r3, [r7, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	807b      	strh	r3, [r7, #2]
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001168:	d217      	bcs.n	800119a <ILI9341_DrawPixel+0x4a>
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	2bef      	cmp	r3, #239	@ 0xef
 800116e:	d814      	bhi.n	800119a <ILI9341_DrawPixel+0x4a>
  ILI9341_SetAddrWindow(x, y, x, y);
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	88b9      	ldrh	r1, [r7, #4]
 8001176:	88f8      	ldrh	r0, [r7, #6]
 8001178:	f7ff feaa 	bl	8000ed0 <ILI9341_SetAddrWindow>
  uint8_t data[2] = { (uint8_t)(color >> 8) ,(uint8_t)(color & 0xFF)};
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	0a1b      	lsrs	r3, r3, #8
 8001180:	b29b      	uxth	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	733b      	strb	r3, [r7, #12]
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	737b      	strb	r3, [r7, #13]
  ILI9341_WriteData(data, 2);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2102      	movs	r1, #2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fe7e 	bl	8000e94 <ILI9341_WriteData>
 8001198:	e000      	b.n	800119c <ILI9341_DrawPixel+0x4c>
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 800119a:	bf00      	nop
}
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <ILI9341_FillRect>:

// Fill a rectangle with a color (blocking). Uses a small chunk buffer to avoid huge stack.
void ILI9341_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4604      	mov	r4, r0
 80011ac:	4608      	mov	r0, r1
 80011ae:	4611      	mov	r1, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	4623      	mov	r3, r4
 80011b4:	80fb      	strh	r3, [r7, #6]
 80011b6:	4603      	mov	r3, r0
 80011b8:	80bb      	strh	r3, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]
 80011be:	4613      	mov	r3, r2
 80011c0:	803b      	strh	r3, [r7, #0]
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80011c8:	d265      	bcs.n	8001296 <ILI9341_FillRect+0xf2>
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	2bef      	cmp	r3, #239	@ 0xef
 80011ce:	d862      	bhi.n	8001296 <ILI9341_FillRect+0xf2>
  if((x + w - 1) >= ILI9341_TFTWIDTH)  w = ILI9341_TFTWIDTH - x;
 80011d0:	88fa      	ldrh	r2, [r7, #6]
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	4413      	add	r3, r2
 80011d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80011da:	dd03      	ble.n	80011e4 <ILI9341_FillRect+0x40>
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80011e2:	807b      	strh	r3, [r7, #2]
  if((y + h - 1) >= ILI9341_TFTHEIGHT) h = ILI9341_TFTHEIGHT - y;
 80011e4:	88ba      	ldrh	r2, [r7, #4]
 80011e6:	883b      	ldrh	r3, [r7, #0]
 80011e8:	4413      	add	r3, r2
 80011ea:	2bf0      	cmp	r3, #240	@ 0xf0
 80011ec:	dd03      	ble.n	80011f6 <ILI9341_FillRect+0x52>
 80011ee:	88bb      	ldrh	r3, [r7, #4]
 80011f0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80011f4:	803b      	strh	r3, [r7, #0]

  ILI9341_SetAddrWindow(x, y, x + w - 1, y + h - 1);
 80011f6:	88fa      	ldrh	r2, [r7, #6]
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	4413      	add	r3, r2
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	3b01      	subs	r3, #1
 8001200:	b29c      	uxth	r4, r3
 8001202:	88ba      	ldrh	r2, [r7, #4]
 8001204:	883b      	ldrh	r3, [r7, #0]
 8001206:	4413      	add	r3, r2
 8001208:	b29b      	uxth	r3, r3
 800120a:	3b01      	subs	r3, #1
 800120c:	b29b      	uxth	r3, r3
 800120e:	88b9      	ldrh	r1, [r7, #4]
 8001210:	88f8      	ldrh	r0, [r7, #6]
 8001212:	4622      	mov	r2, r4
 8001214:	f7ff fe5c 	bl	8000ed0 <ILI9341_SetAddrWindow>

  uint32_t pixels = (uint32_t)w * h;
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	883a      	ldrh	r2, [r7, #0]
 800121c:	fb02 f303 	mul.w	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
  // Use a chunk to limit RAM usage. Make buffer static to avoid large stack frames.
  uint16_t chunkPixels = 128;
 8001222:	2380      	movs	r3, #128	@ 0x80
 8001224:	823b      	strh	r3, [r7, #16]
  static uint8_t buf[128 * 2]; // 2 bytes per pixel, static to conserve stack
  for(uint16_t i = 0; i < chunkPixels; i++) {
 8001226:	2300      	movs	r3, #0
 8001228:	827b      	strh	r3, [r7, #18]
 800122a:	e011      	b.n	8001250 <ILI9341_FillRect+0xac>
    buf[i*2] = (uint8_t)(color >> 8);
 800122c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	b29a      	uxth	r2, r3
 8001232:	8a7b      	ldrh	r3, [r7, #18]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	b2d1      	uxtb	r1, r2
 8001238:	4a19      	ldr	r2, [pc, #100]	@ (80012a0 <ILI9341_FillRect+0xfc>)
 800123a:	54d1      	strb	r1, [r2, r3]
    buf[i*2+1] = (uint8_t)(color & 0xFF);
 800123c:	8a7b      	ldrh	r3, [r7, #18]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	3301      	adds	r3, #1
 8001242:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001244:	b2d1      	uxtb	r1, r2
 8001246:	4a16      	ldr	r2, [pc, #88]	@ (80012a0 <ILI9341_FillRect+0xfc>)
 8001248:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i = 0; i < chunkPixels; i++) {
 800124a:	8a7b      	ldrh	r3, [r7, #18]
 800124c:	3301      	adds	r3, #1
 800124e:	827b      	strh	r3, [r7, #18]
 8001250:	8a7a      	ldrh	r2, [r7, #18]
 8001252:	8a3b      	ldrh	r3, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d3e9      	bcc.n	800122c <ILI9341_FillRect+0x88>
  }

  ILI9341_Select();
 8001258:	f7ff fdd4 	bl	8000e04 <ILI9341_Select>
  ILI9341_DC_Data();
 800125c:	f7ff fdf6 	bl	8000e4c <ILI9341_DC_Data>
  while(pixels) {
 8001260:	e013      	b.n	800128a <ILI9341_FillRect+0xe6>
    uint32_t toSend = (pixels > chunkPixels) ? chunkPixels : pixels;
 8001262:	8a3b      	ldrh	r3, [r7, #16]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	4293      	cmp	r3, r2
 8001268:	bf28      	it	cs
 800126a:	4613      	movcs	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
    HAL_SPI_Transmit(&hspi1, buf, toSend * 2, HAL_MAX_DELAY);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	b29b      	uxth	r3, r3
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	b29a      	uxth	r2, r3
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	4909      	ldr	r1, [pc, #36]	@ (80012a0 <ILI9341_FillRect+0xfc>)
 800127c:	4809      	ldr	r0, [pc, #36]	@ (80012a4 <ILI9341_FillRect+0x100>)
 800127e:	f001 fdc7 	bl	8002e10 <HAL_SPI_Transmit>
    pixels -= toSend;
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
  while(pixels) {
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e8      	bne.n	8001262 <ILI9341_FillRect+0xbe>
  }
  ILI9341_Unselect();
 8001290:	f7ff fdc4 	bl	8000e1c <ILI9341_Unselect>
 8001294:	e000      	b.n	8001298 <ILI9341_FillRect+0xf4>
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 8001296:	bf00      	nop
}
 8001298:	371c      	adds	r7, #28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000078 	.word	0x20000078
 80012a4:	20000178 	.word	0x20000178

080012a8 <ILI9341_WritePixels>:

// Write a block of pixels (16-bit RGB565). This avoids per-pixel SetAddrWindow calls
// when the caller has a buffer ready. pixels is an array of uint16_t in native endianness;
// this function will send high byte then low byte for each pixel.
void ILI9341_WritePixels(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *pixels)
{
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b0c8      	sub	sp, #288	@ 0x120
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4605      	mov	r5, r0
 80012b0:	460c      	mov	r4, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012ba:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80012be:	462a      	mov	r2, r5
 80012c0:	801a      	strh	r2, [r3, #0]
 80012c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012ca:	4622      	mov	r2, r4
 80012cc:	801a      	strh	r2, [r3, #0]
 80012ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012d2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80012d6:	4602      	mov	r2, r0
 80012d8:	801a      	strh	r2, [r3, #0]
 80012da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012e2:	460a      	mov	r2, r1
 80012e4:	801a      	strh	r2, [r3, #0]
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 80012e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012ea:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80012f4:	f080 80d0 	bcs.w	8001498 <ILI9341_WritePixels+0x1f0>
 80012f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80012fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	2bef      	cmp	r3, #239	@ 0xef
 8001304:	f200 80c8 	bhi.w	8001498 <ILI9341_WritePixels+0x1f0>
  if((x + w - 1) >= ILI9341_TFTWIDTH)  w = ILI9341_TFTWIDTH - x;
 8001308:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800130c:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001310:	881a      	ldrh	r2, [r3, #0]
 8001312:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001316:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	4413      	add	r3, r2
 800131e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001322:	dd0b      	ble.n	800133c <ILI9341_WritePixels+0x94>
 8001324:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001328:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 800132c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001330:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8001334:	8812      	ldrh	r2, [r2, #0]
 8001336:	f5c2 72a0 	rsb	r2, r2, #320	@ 0x140
 800133a:	801a      	strh	r2, [r3, #0]
  if((y + h - 1) >= ILI9341_TFTHEIGHT) h = ILI9341_TFTHEIGHT - y;
 800133c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001340:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001344:	881a      	ldrh	r2, [r3, #0]
 8001346:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800134a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	4413      	add	r3, r2
 8001352:	2bf0      	cmp	r3, #240	@ 0xf0
 8001354:	dd0b      	ble.n	800136e <ILI9341_WritePixels+0xc6>
 8001356:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800135a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800135e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001362:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	f1c2 02f0 	rsb	r2, r2, #240	@ 0xf0
 800136c:	801a      	strh	r2, [r3, #0]

  ILI9341_SetAddrWindow(x, y, x + w - 1, y + h - 1);
 800136e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001372:	f5a3 728d 	sub.w	r2, r3, #282	@ 0x11a
 8001376:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800137a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	b29b      	uxth	r3, r3
 8001386:	3b01      	subs	r3, #1
 8001388:	b29c      	uxth	r4, r3
 800138a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800138e:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 8001392:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001396:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	3b01      	subs	r3, #1
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013ae:	8819      	ldrh	r1, [r3, #0]
 80013b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013b4:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80013b8:	8818      	ldrh	r0, [r3, #0]
 80013ba:	4613      	mov	r3, r2
 80013bc:	4622      	mov	r2, r4
 80013be:	f7ff fd87 	bl	8000ed0 <ILI9341_SetAddrWindow>

  // Send pixel array as bytes (high byte first)
  ILI9341_Select();
 80013c2:	f7ff fd1f 	bl	8000e04 <ILI9341_Select>
  ILI9341_DC_Data();
 80013c6:	f7ff fd41 	bl	8000e4c <ILI9341_DC_Data>
  // We'll stream each pixel by converting to bytes in a small buffer
  uint8_t txbuf[128*2];
  uint32_t remaining = (uint32_t)w * h;
 80013ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80013ce:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80013d8:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80013dc:	8812      	ldrh	r2, [r2, #0]
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint32_t idx = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  while(remaining) {
 80013ec:	e04d      	b.n	800148a <ILI9341_WritePixels+0x1e2>
    uint32_t chunk = (remaining > 128) ? 128 : remaining;
 80013ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80013f2:	2b80      	cmp	r3, #128	@ 0x80
 80013f4:	bf28      	it	cs
 80013f6:	2380      	movcs	r3, #128	@ 0x80
 80013f8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    for(uint32_t i = 0; i < chunk; i++) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001402:	e029      	b.n	8001458 <ILI9341_WritePixels+0x1b0>
      uint16_t p = pixels[idx++];
 8001404:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8001414:	4413      	add	r3, r2
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      txbuf[i*2] = (uint8_t)(p >> 8);
 800141c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	b29a      	uxth	r2, r3
 8001424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	b2d1      	uxtb	r1, r2
 800142c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001430:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001434:	54d1      	strb	r1, [r2, r3]
      txbuf[i*2+1] = (uint8_t)(p & 0xFF);
 8001436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	3301      	adds	r3, #1
 800143e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8001442:	b2d1      	uxtb	r1, r2
 8001444:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001448:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800144c:	54d1      	strb	r1, [r2, r3]
    for(uint32_t i = 0; i < chunk; i++) {
 800144e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001452:	3301      	adds	r3, #1
 8001454:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001458:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800145c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001460:	429a      	cmp	r2, r3
 8001462:	d3cf      	bcc.n	8001404 <ILI9341_WritePixels+0x15c>
    }
    HAL_SPI_Transmit(&hspi1, txbuf, chunk * 2, HAL_MAX_DELAY);
 8001464:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001468:	b29b      	uxth	r3, r3
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	b29a      	uxth	r2, r3
 800146e:	f107 010c 	add.w	r1, r7, #12
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	480b      	ldr	r0, [pc, #44]	@ (80014a4 <ILI9341_WritePixels+0x1fc>)
 8001478:	f001 fcca 	bl	8002e10 <HAL_SPI_Transmit>
    remaining -= chunk;
 800147c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001480:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  while(remaining) {
 800148a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1ad      	bne.n	80013ee <ILI9341_WritePixels+0x146>
  }
  ILI9341_Unselect();
 8001492:	f7ff fcc3 	bl	8000e1c <ILI9341_Unselect>
 8001496:	e000      	b.n	800149a <ILI9341_WritePixels+0x1f2>
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 8001498:	bf00      	nop
}
 800149a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800149e:	46bd      	mov	sp, r7
 80014a0:	bdb0      	pop	{r4, r5, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000178 	.word	0x20000178

080014a8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  ILI9341_FillRect(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	23f0      	movs	r3, #240	@ 0xf0
 80014b8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80014bc:	2100      	movs	r1, #0
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff fe70 	bl	80011a4 <ILI9341_FillRect>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <ILI9341_DrawRectangle>:
  ILI9341_WriteData(&madctl, 1);
}

// Draw a filled rectangle (compatibility wrapper)
void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	4604      	mov	r4, r0
 80014d4:	4608      	mov	r0, r1
 80014d6:	4611      	mov	r1, r2
 80014d8:	461a      	mov	r2, r3
 80014da:	4623      	mov	r3, r4
 80014dc:	80fb      	strh	r3, [r7, #6]
 80014de:	4603      	mov	r3, r0
 80014e0:	80bb      	strh	r3, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	807b      	strh	r3, [r7, #2]
 80014e6:	4613      	mov	r3, r2
 80014e8:	803b      	strh	r3, [r7, #0]
  // Use project macros for bounds
  if ((x >= ILI9341_TFTWIDTH) || (y >= ILI9341_TFTHEIGHT)) return;
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80014f0:	d21f      	bcs.n	8001532 <ILI9341_DrawRectangle+0x66>
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	2bef      	cmp	r3, #239	@ 0xef
 80014f6:	d81c      	bhi.n	8001532 <ILI9341_DrawRectangle+0x66>

  if ((x + width - 1) >= ILI9341_TFTWIDTH) {
 80014f8:	88fa      	ldrh	r2, [r7, #6]
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	4413      	add	r3, r2
 80014fe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001502:	dd03      	ble.n	800150c <ILI9341_DrawRectangle+0x40>
    width = ILI9341_TFTWIDTH - x;
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800150a:	807b      	strh	r3, [r7, #2]
  }
  if ((y + height - 1) >= ILI9341_TFTHEIGHT) {
 800150c:	88ba      	ldrh	r2, [r7, #4]
 800150e:	883b      	ldrh	r3, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	2bf0      	cmp	r3, #240	@ 0xf0
 8001514:	dd03      	ble.n	800151e <ILI9341_DrawRectangle+0x52>
    height = ILI9341_TFTHEIGHT - y;
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800151c:	803b      	strh	r3, [r7, #0]
  }

  // Reuse existing FillRect implementation which handles address window and fast fill
  ILI9341_FillRect(x, y, width, height, color);
 800151e:	883c      	ldrh	r4, [r7, #0]
 8001520:	887a      	ldrh	r2, [r7, #2]
 8001522:	88b9      	ldrh	r1, [r7, #4]
 8001524:	88f8      	ldrh	r0, [r7, #6]
 8001526:	8b3b      	ldrh	r3, [r7, #24]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	4623      	mov	r3, r4
 800152c:	f7ff fe3a 	bl	80011a4 <ILI9341_FillRect>
 8001530:	e000      	b.n	8001534 <ILI9341_DrawRectangle+0x68>
  if ((x >= ILI9341_TFTWIDTH) || (y >= ILI9341_TFTHEIGHT)) return;
 8001532:	bf00      	nop
}
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
	...

0800153c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a04      	ldr	r2, [pc, #16]	@ (8001558 <HAL_UART_RxCpltCallback+0x1c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d101      	bne.n	8001550 <HAL_UART_RxCpltCallback+0x14>
    UARTDisplay_RxCplt();
 800154c:	f000 fb82 	bl	8001c54 <UARTDisplay_RxCplt>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200001d0 	.word	0x200001d0

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001560:	f000 fbe0 	bl	8001d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f83a 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f000 f908 	bl	800177c <MX_GPIO_Init>
  MX_SPI1_Init();
 800156c:	f000 f87c 	bl	8001668 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001570:	f000 f8b0 	bl	80016d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001574:	f000 f8d8 	bl	8001728 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DC high
 8001578:	2201      	movs	r2, #1
 800157a:	2102      	movs	r1, #2
 800157c:	4814      	ldr	r0, [pc, #80]	@ (80015d0 <main+0x74>)
 800157e:	f000 ff9b 	bl	80024b8 <HAL_GPIO_WritePin>
    ILI9341_Init();
 8001582:	f7ff fced 	bl	8000f60 <ILI9341_Init>
    UARTDisplay_Init(&huart1);         // start RX IT trên huart1
 8001586:	4813      	ldr	r0, [pc, #76]	@ (80015d4 <main+0x78>)
 8001588:	f000 faa8 	bl	8001adc <UARTDisplay_Init>
    UARTDisplay_SetLineCallback(showUARTLine); // đăng ký callback
 800158c:	4812      	ldr	r0, [pc, #72]	@ (80015d8 <main+0x7c>)
 800158e:	f000 facf 	bl	8001b30 <UARTDisplay_SetLineCallback>

    ILI9341_FillScreen(0x0000); // Đen
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff ff88 	bl	80014a8 <ILI9341_FillScreen>
    ILI9341_DrawPixel(10, 10, 0xF800); // Đỏ
 8001598:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800159c:	210a      	movs	r1, #10
 800159e:	200a      	movs	r0, #10
 80015a0:	f7ff fdd6 	bl	8001150 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(20, 20, 0xFFE0); // Vàng
 80015a4:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80015a8:	2114      	movs	r1, #20
 80015aa:	2014      	movs	r0, #20
 80015ac:	f7ff fdd0 	bl	8001150 <ILI9341_DrawPixel>
    ILI9341_DrawFilledCircle(200, 200, 30, 0x07E0); // Vẽ hình tròn rỗng màu xanh lá
 80015b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80015b4:	221e      	movs	r2, #30
 80015b6:	21c8      	movs	r1, #200	@ 0xc8
 80015b8:	20c8      	movs	r0, #200	@ 0xc8
 80015ba:	f7ff fa5b 	bl	8000a74 <ILI9341_DrawFilledCircle>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    UARTDisplay_Process();
 80015be:	f000 fac5 	bl	8001b4c <UARTDisplay_Process>
	    HAL_Delay(1000);
 80015c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015c6:	f000 fc0f 	bl	8001de8 <HAL_Delay>
	    UARTDisplay_Process();
 80015ca:	bf00      	nop
 80015cc:	e7f7      	b.n	80015be <main+0x62>
 80015ce:	bf00      	nop
 80015d0:	40010c00 	.word	0x40010c00
 80015d4:	200001d0 	.word	0x200001d0
 80015d8:	08000dcd 	.word	0x08000dcd

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b090      	sub	sp, #64	@ 0x40
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0318 	add.w	r3, r7, #24
 80015e6:	2228      	movs	r2, #40	@ 0x28
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 fb94 	bl	8003d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015fe:	2301      	movs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001602:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160c:	2301      	movs	r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001610:	2302      	movs	r3, #2
 8001612:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001618:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800161a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800161e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	4618      	mov	r0, r3
 8001626:	f000 ff5f 	bl	80024e8 <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001630:	f000 f8f0 	bl	8001814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	230f      	movs	r3, #15
 8001636:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001638:	2302      	movs	r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001640:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2102      	movs	r1, #2
 800164e:	4618      	mov	r0, r3
 8001650:	f001 f9cc 	bl	80029ec <HAL_RCC_ClockConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800165a:	f000 f8db 	bl	8001814 <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	3740      	adds	r7, #64	@ 0x40
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800166c:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <MX_SPI1_Init+0x64>)
 800166e:	4a18      	ldr	r2, [pc, #96]	@ (80016d0 <MX_SPI1_Init+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001672:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <MX_SPI1_Init+0x64>)
 8001674:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <MX_SPI1_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <MX_SPI1_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_SPI1_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <MX_SPI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_SPI1_Init+0x64>)
 8001694:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001698:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800169a:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_SPI1_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <MX_SPI1_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_SPI1_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <MX_SPI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_SPI1_Init+0x64>)
 80016b4:	220a      	movs	r2, #10
 80016b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	@ (80016cc <MX_SPI1_Init+0x64>)
 80016ba:	f001 fb25 	bl	8002d08 <HAL_SPI_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016c4:	f000 f8a6 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000178 	.word	0x20000178
 80016d0:	40013000 	.word	0x40013000

080016d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_USART1_UART_Init+0x4c>)
 80016da:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <MX_USART1_UART_Init+0x50>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <MX_USART1_UART_Init+0x4c>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_USART1_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_USART1_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <MX_USART1_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_USART1_UART_Init+0x4c>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <MX_USART1_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_USART1_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_USART1_UART_Init+0x4c>)
 800170c:	f001 fd7d 	bl	800320a <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001716:	f000 f87d 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200001d0 	.word	0x200001d0
 8001724:	40013800 	.word	0x40013800

08001728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <MX_USART2_UART_Init+0x4c>)
 800172e:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <MX_USART2_UART_Init+0x50>)
 8001730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <MX_USART2_UART_Init+0x4c>)
 8001734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MX_USART2_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <MX_USART2_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <MX_USART2_UART_Init+0x4c>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <MX_USART2_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_USART2_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_USART2_UART_Init+0x4c>)
 8001760:	f001 fd53 	bl	800320a <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800176a:	f000 f853 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000218 	.word	0x20000218
 8001778:	40004400 	.word	0x40004400

0800177c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 0310 	add.w	r3, r7, #16
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001790:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <MX_GPIO_Init+0x90>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a1d      	ldr	r2, [pc, #116]	@ (800180c <MX_GPIO_Init+0x90>)
 8001796:	f043 0320 	orr.w	r3, r3, #32
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <MX_GPIO_Init+0x90>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	4b18      	ldr	r3, [pc, #96]	@ (800180c <MX_GPIO_Init+0x90>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a17      	ldr	r2, [pc, #92]	@ (800180c <MX_GPIO_Init+0x90>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <MX_GPIO_Init+0x90>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <MX_GPIO_Init+0x90>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a11      	ldr	r2, [pc, #68]	@ (800180c <MX_GPIO_Init+0x90>)
 80017c6:	f043 0308 	orr.w	r3, r3, #8
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <MX_GPIO_Init+0x90>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f240 4103 	movw	r1, #1027	@ 0x403
 80017de:	480c      	ldr	r0, [pc, #48]	@ (8001810 <MX_GPIO_Init+0x94>)
 80017e0:	f000 fe6a 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 80017e4:	f240 4303 	movw	r3, #1027	@ 0x403
 80017e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	4619      	mov	r1, r3
 80017fc:	4804      	ldr	r0, [pc, #16]	@ (8001810 <MX_GPIO_Init+0x94>)
 80017fe:	f000 fcd7 	bl	80021b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001802:	bf00      	nop
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	40010c00 	.word	0x40010c00

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <Error_Handler+0x8>

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <HAL_MspInit+0x5c>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	4a14      	ldr	r2, [pc, #80]	@ (800187c <HAL_MspInit+0x5c>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6193      	str	r3, [r2, #24]
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_MspInit+0x5c>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <HAL_MspInit+0x5c>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a0e      	ldr	r2, [pc, #56]	@ (800187c <HAL_MspInit+0x5c>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001848:	61d3      	str	r3, [r2, #28]
 800184a:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <HAL_MspInit+0x5c>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_MspInit+0x60>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <HAL_MspInit+0x60>)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000

08001884 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a15      	ldr	r2, [pc, #84]	@ (80018f4 <HAL_SPI_MspInit+0x70>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d123      	bne.n	80018ec <HAL_SPI_MspInit+0x68>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <HAL_SPI_MspInit+0x74>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a13      	ldr	r2, [pc, #76]	@ (80018f8 <HAL_SPI_MspInit+0x74>)
 80018aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_SPI_MspInit+0x74>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <HAL_SPI_MspInit+0x74>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	@ (80018f8 <HAL_SPI_MspInit+0x74>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <HAL_SPI_MspInit+0x74>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018d4:	23a0      	movs	r3, #160	@ 0xa0
 80018d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	4805      	ldr	r0, [pc, #20]	@ (80018fc <HAL_SPI_MspInit+0x78>)
 80018e8:	f000 fc62 	bl	80021b0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40013000 	.word	0x40013000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010800 	.word	0x40010800

08001900 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	@ 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0318 	add.w	r3, r7, #24
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a18 <HAL_UART_MspInit+0x118>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d13a      	bne.n	8001996 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001920:	4b3e      	ldr	r3, [pc, #248]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a3d      	ldr	r2, [pc, #244]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 8001926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b38      	ldr	r3, [pc, #224]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a37      	ldr	r2, [pc, #220]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b35      	ldr	r3, [pc, #212]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 0318 	add.w	r3, r7, #24
 8001962:	4619      	mov	r1, r3
 8001964:	482e      	ldr	r0, [pc, #184]	@ (8001a20 <HAL_UART_MspInit+0x120>)
 8001966:	f000 fc23 	bl	80021b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800196a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	4619      	mov	r1, r3
 800197e:	4828      	ldr	r0, [pc, #160]	@ (8001a20 <HAL_UART_MspInit+0x120>)
 8001980:	f000 fc16 	bl	80021b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2100      	movs	r1, #0
 8001988:	2025      	movs	r0, #37	@ 0x25
 800198a:	f000 fb28 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800198e:	2025      	movs	r0, #37	@ 0x25
 8001990:	f000 fb41 	bl	8002016 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001994:	e03c      	b.n	8001a10 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a22      	ldr	r2, [pc, #136]	@ (8001a24 <HAL_UART_MspInit+0x124>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d137      	bne.n	8001a10 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 80019a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019aa:	61d3      	str	r3, [r2, #28]
 80019ac:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a17      	ldr	r2, [pc, #92]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_UART_MspInit+0x11c>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019d0:	2304      	movs	r3, #4
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 0318 	add.w	r3, r7, #24
 80019e0:	4619      	mov	r1, r3
 80019e2:	480f      	ldr	r0, [pc, #60]	@ (8001a20 <HAL_UART_MspInit+0x120>)
 80019e4:	f000 fbe4 	bl	80021b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019e8:	2308      	movs	r3, #8
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4619      	mov	r1, r3
 80019fa:	4809      	ldr	r0, [pc, #36]	@ (8001a20 <HAL_UART_MspInit+0x120>)
 80019fc:	f000 fbd8 	bl	80021b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2100      	movs	r1, #0
 8001a04:	2026      	movs	r0, #38	@ 0x26
 8001a06:	f000 faea 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a0a:	2026      	movs	r0, #38	@ 0x26
 8001a0c:	f000 fb03 	bl	8002016 <HAL_NVIC_EnableIRQ>
}
 8001a10:	bf00      	nop
 8001a12:	3728      	adds	r7, #40	@ 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40004400 	.word	0x40004400

08001a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <NMI_Handler+0x4>

08001a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <MemManage_Handler+0x4>

08001a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a78:	f000 f99a 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <USART1_IRQHandler+0x10>)
 8001a86:	f001 fc35 	bl	80032f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200001d0 	.word	0x200001d0

08001a94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a98:	4802      	ldr	r0, [pc, #8]	@ (8001aa4 <USART2_IRQHandler+0x10>)
 8001a9a:	f001 fc2b 	bl	80032f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000218 	.word	0x20000218

08001aa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <udl_start_rx>:
static char queue_buf[UDL_QUEUE_SZ][UDL_LINE_BUFSZ];
static volatile uint8_t q_head = 0, q_tail = 0, q_count = 0;

// Internal: start listening for next byte
static void udl_start_rx(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
    if(g_huart) {
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <udl_start_rx+0x20>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <udl_start_rx+0x1a>
        if(HAL_UART_Receive_IT(g_huart, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 8001ac0:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <udl_start_rx+0x20>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4904      	ldr	r1, [pc, #16]	@ (8001ad8 <udl_start_rx+0x24>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 fbee 	bl	80032aa <HAL_UART_Receive_IT>
            // try again later (caller/ISR will re-trigger)
        }
    }
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000260 	.word	0x20000260
 8001ad8:	20000268 	.word	0x20000268

08001adc <UARTDisplay_Init>:
// khởi động  uart  lắng nghe byte tiếp theo và reset bộ đệm  hiện tại
void UARTDisplay_Init(UART_HandleTypeDef *huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    g_huart = huart;
 8001ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8001b18 <UARTDisplay_Init+0x3c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
    line_pos = 0;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <UARTDisplay_Init+0x40>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	801a      	strh	r2, [r3, #0]
    q_head = q_tail = q_count = 0;
 8001af0:	2200      	movs	r2, #0
 8001af2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <UARTDisplay_Init+0x44>)
 8001af4:	4611      	mov	r1, r2
 8001af6:	7019      	strb	r1, [r3, #0]
 8001af8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <UARTDisplay_Init+0x48>)
 8001afa:	4611      	mov	r1, r2
 8001afc:	7019      	strb	r1, [r3, #0]
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <UARTDisplay_Init+0x4c>)
 8001b00:	701a      	strb	r2, [r3, #0]
    memset(line_buf, 0, sizeof(line_buf)); // clear current line buffer- làm sạch lại bộ đệm  hiện tại
 8001b02:	2280      	movs	r2, #128	@ 0x80
 8001b04:	2100      	movs	r1, #0
 8001b06:	4809      	ldr	r0, [pc, #36]	@ (8001b2c <UARTDisplay_Init+0x50>)
 8001b08:	f002 f906 	bl	8003d18 <memset>
    udl_start_rx();// khởi động lại rx
 8001b0c:	f7ff ffd2 	bl	8001ab4 <udl_start_rx>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000260 	.word	0x20000260
 8001b1c:	200002ec 	.word	0x200002ec
 8001b20:	200006f2 	.word	0x200006f2
 8001b24:	200006f1 	.word	0x200006f1
 8001b28:	200006f0 	.word	0x200006f0
 8001b2c:	2000026c 	.word	0x2000026c

08001b30 <UARTDisplay_SetLineCallback>:

void UARTDisplay_SetLineCallback(void (*cb)(const char *line))
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
    g_line_cb = cb;
 8001b38:	4a03      	ldr	r2, [pc, #12]	@ (8001b48 <UARTDisplay_SetLineCallback+0x18>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000264 	.word	0x20000264

08001b4c <UARTDisplay_Process>:


void UARTDisplay_Process(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
    while(q_count) {
 8001b52:	e027      	b.n	8001ba4 <UARTDisplay_Process+0x58>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b54:	b672      	cpsid	i
}
 8001b56:	bf00      	nop
        __disable_irq();
        char *ln = queue_buf[q_head];
 8001b58:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <UARTDisplay_Process+0x6c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	01db      	lsls	r3, r3, #7
 8001b60:	4a16      	ldr	r2, [pc, #88]	@ (8001bbc <UARTDisplay_Process+0x70>)
 8001b62:	4413      	add	r3, r2
 8001b64:	607b      	str	r3, [r7, #4]
        q_head = (q_head + 1) % UDL_QUEUE_SZ;
 8001b66:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <UARTDisplay_Process+0x6c>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	425a      	negs	r2, r3
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	f002 0207 	and.w	r2, r2, #7
 8001b78:	bf58      	it	pl
 8001b7a:	4253      	negpl	r3, r2
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <UARTDisplay_Process+0x6c>)
 8001b80:	701a      	strb	r2, [r3, #0]
        q_count--;
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <UARTDisplay_Process+0x74>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <UARTDisplay_Process+0x74>)
 8001b8e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b90:	b662      	cpsie	i
}
 8001b92:	bf00      	nop
        __enable_irq();
        if(g_line_cb) g_line_cb(ln);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <UARTDisplay_Process+0x78>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <UARTDisplay_Process+0x58>
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <UARTDisplay_Process+0x78>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
    while(q_count) {
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <UARTDisplay_Process+0x74>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1d2      	bne.n	8001b54 <UARTDisplay_Process+0x8>
        // clear slot after callback 
    }
}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200006f0 	.word	0x200006f0
 8001bbc:	200002f0 	.word	0x200002f0
 8001bc0:	200006f2 	.word	0x200006f2
 8001bc4:	20000264 	.word	0x20000264

08001bc8 <UARTDisplay_PushLine>:

// Push a line into queue (caller must ensure it's a C string)
int UARTDisplay_PushLine(const char *line)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
    __disable_irq();
    if(q_count >= UDL_QUEUE_SZ) { __enable_irq(); return -1; }
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <UARTDisplay_PushLine+0x80>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b07      	cmp	r3, #7
 8001bdc:	d904      	bls.n	8001be8 <UARTDisplay_PushLine+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
 8001bde:	b662      	cpsie	i
}
 8001be0:	bf00      	nop
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e02b      	b.n	8001c40 <UARTDisplay_PushLine+0x78>
    strncpy(queue_buf[q_tail], line, UDL_LINE_BUFSZ-1);
 8001be8:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <UARTDisplay_PushLine+0x84>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	01db      	lsls	r3, r3, #7
 8001bf0:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <UARTDisplay_PushLine+0x88>)
 8001bf2:	4413      	add	r3, r2
 8001bf4:	227f      	movs	r2, #127	@ 0x7f
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 f895 	bl	8003d28 <strncpy>
    queue_buf[q_tail][UDL_LINE_BUFSZ-1] = '\0';
 8001bfe:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <UARTDisplay_PushLine+0x84>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <UARTDisplay_PushLine+0x88>)
 8001c06:	01db      	lsls	r3, r3, #7
 8001c08:	4413      	add	r3, r2
 8001c0a:	337f      	adds	r3, #127	@ 0x7f
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
    q_tail = (q_tail + 1) % UDL_QUEUE_SZ;
 8001c10:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <UARTDisplay_PushLine+0x84>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	425a      	negs	r2, r3
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	f002 0207 	and.w	r2, r2, #7
 8001c22:	bf58      	it	pl
 8001c24:	4253      	negpl	r3, r2
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <UARTDisplay_PushLine+0x84>)
 8001c2a:	701a      	strb	r2, [r3, #0]
    q_count++;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <UARTDisplay_PushLine+0x80>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <UARTDisplay_PushLine+0x80>)
 8001c38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c3a:	b662      	cpsie	i
}
 8001c3c:	bf00      	nop
    __enable_irq();
    return 0;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	200006f2 	.word	0x200006f2
 8001c4c:	200006f1 	.word	0x200006f1
 8001c50:	200002f0 	.word	0x200002f0

08001c54 <UARTDisplay_RxCplt>:

// This function should be called by the application's HAL_UART_RxCpltCallback
// when the configured huart triggers a RX complete (1 byte). We keep it public
// to make wiring explicit.
void UARTDisplay_RxCplt(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
    char ch = (char)rx_byte;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <UARTDisplay_RxCplt+0x78>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  
    if(ch == '\r' || ch == '\n' || ch == ';') {
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	2b0d      	cmp	r3, #13
 8001c64:	d005      	beq.n	8001c72 <UARTDisplay_RxCplt+0x1e>
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2b0a      	cmp	r3, #10
 8001c6a:	d002      	beq.n	8001c72 <UARTDisplay_RxCplt+0x1e>
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c70:	d115      	bne.n	8001c9e <UARTDisplay_RxCplt+0x4a>
        if(line_pos > 0) {
 8001c72:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <UARTDisplay_RxCplt+0x7c>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <UARTDisplay_RxCplt+0x6a>
            // terminate and enqueue
            line_buf[line_pos] = '\0';
 8001c7c:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <UARTDisplay_RxCplt+0x7c>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <UARTDisplay_RxCplt+0x80>)
 8001c86:	2100      	movs	r1, #0
 8001c88:	5499      	strb	r1, [r3, r2]
            UARTDisplay_PushLine(line_buf);
 8001c8a:	4812      	ldr	r0, [pc, #72]	@ (8001cd4 <UARTDisplay_RxCplt+0x80>)
 8001c8c:	f7ff ff9c 	bl	8001bc8 <UARTDisplay_PushLine>
            line_pos = 0;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <UARTDisplay_RxCplt+0x7c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	801a      	strh	r2, [r3, #0]
            line_buf[0] = '\0';
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <UARTDisplay_RxCplt+0x80>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
        if(line_pos > 0) {
 8001c9c:	e00f      	b.n	8001cbe <UARTDisplay_RxCplt+0x6a>
        }
    } else {
        if(line_pos < (UDL_LINE_BUFSZ - 1)) {
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <UARTDisplay_RxCplt+0x7c>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ca6:	d80a      	bhi.n	8001cbe <UARTDisplay_RxCplt+0x6a>
            line_buf[line_pos++] = ch;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <UARTDisplay_RxCplt+0x7c>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	b291      	uxth	r1, r2
 8001cb2:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <UARTDisplay_RxCplt+0x7c>)
 8001cb4:	8011      	strh	r1, [r2, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4a06      	ldr	r2, [pc, #24]	@ (8001cd4 <UARTDisplay_RxCplt+0x80>)
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	5453      	strb	r3, [r2, r1]
        }
       
    }
    // restart reception
    udl_start_rx();
 8001cbe:	f7ff fef9 	bl	8001ab4 <udl_start_rx>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000268 	.word	0x20000268
 8001cd0:	200002ec 	.word	0x200002ec
 8001cd4:	2000026c 	.word	0x2000026c

08001cd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd8:	f7ff fee6 	bl	8001aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cdc:	480b      	ldr	r0, [pc, #44]	@ (8001d0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cde:	490c      	ldr	r1, [pc, #48]	@ (8001d10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8001d14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a09      	ldr	r2, [pc, #36]	@ (8001d18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cf4:	4c09      	ldr	r4, [pc, #36]	@ (8001d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d02:	f002 f82b 	bl	8003d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d06:	f7ff fc29 	bl	800155c <main>
  bx lr
 8001d0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d14:	08004968 	.word	0x08004968
  ldr r2, =_sbss
 8001d18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d1c:	20000830 	.word	0x20000830

08001d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d20:	e7fe      	b.n	8001d20 <ADC1_2_IRQHandler>
	...

08001d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_Init+0x28>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <HAL_Init+0x28>)
 8001d2e:	f043 0310 	orr.w	r3, r3, #16
 8001d32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 f947 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fd6e 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40022000 	.word	0x40022000

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f95f 	bl	8002032 <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 f927 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <HAL_IncTick+0x1c>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_IncTick+0x20>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a03      	ldr	r2, [pc, #12]	@ (8001dd0 <HAL_IncTick+0x20>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	200006f4 	.word	0x200006f4

08001dd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b02      	ldr	r3, [pc, #8]	@ (8001de4 <HAL_GetTick+0x10>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	200006f4 	.word	0x200006f4

08001de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff fff0 	bl	8001dd4 <HAL_GetTick>
 8001df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d005      	beq.n	8001e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <HAL_Delay+0x44>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e0e:	bf00      	nop
 8001e10:	f7ff ffe0 	bl	8001dd4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8f7      	bhi.n	8001e10 <HAL_Delay+0x28>
  {
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000008 	.word	0x20000008

08001e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	@ (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <__NVIC_GetPriorityGrouping+0x18>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 0307 	and.w	r3, r3, #7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db0b      	blt.n	8001ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4906      	ldr	r1, [pc, #24]	@ (8001ec8 <__NVIC_EnableIRQ+0x34>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	@ (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	@ (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	@ 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f7ff ff90 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff2d 	bl	8001e30 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff42 	bl	8001e78 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff90 	bl	8001f20 <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5f 	bl	8001ecc <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff35 	bl	8001e94 <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa2 	bl	8001f84 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d008      	beq.n	8002074 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2204      	movs	r2, #4
 8002066:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e020      	b.n	80020b6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 020e 	bic.w	r2, r2, #14
 8002082:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d005      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2204      	movs	r2, #4
 80020dc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e051      	b.n	8002188 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 020e 	bic.w	r2, r2, #14
 80020f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0201 	bic.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a22      	ldr	r2, [pc, #136]	@ (8002194 <HAL_DMA_Abort_IT+0xd4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d029      	beq.n	8002162 <HAL_DMA_Abort_IT+0xa2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a21      	ldr	r2, [pc, #132]	@ (8002198 <HAL_DMA_Abort_IT+0xd8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d022      	beq.n	800215e <HAL_DMA_Abort_IT+0x9e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1f      	ldr	r2, [pc, #124]	@ (800219c <HAL_DMA_Abort_IT+0xdc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01a      	beq.n	8002158 <HAL_DMA_Abort_IT+0x98>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1e      	ldr	r2, [pc, #120]	@ (80021a0 <HAL_DMA_Abort_IT+0xe0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d012      	beq.n	8002152 <HAL_DMA_Abort_IT+0x92>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1c      	ldr	r2, [pc, #112]	@ (80021a4 <HAL_DMA_Abort_IT+0xe4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00a      	beq.n	800214c <HAL_DMA_Abort_IT+0x8c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1b      	ldr	r2, [pc, #108]	@ (80021a8 <HAL_DMA_Abort_IT+0xe8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d102      	bne.n	8002146 <HAL_DMA_Abort_IT+0x86>
 8002140:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002144:	e00e      	b.n	8002164 <HAL_DMA_Abort_IT+0xa4>
 8002146:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800214a:	e00b      	b.n	8002164 <HAL_DMA_Abort_IT+0xa4>
 800214c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002150:	e008      	b.n	8002164 <HAL_DMA_Abort_IT+0xa4>
 8002152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002156:	e005      	b.n	8002164 <HAL_DMA_Abort_IT+0xa4>
 8002158:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800215c:	e002      	b.n	8002164 <HAL_DMA_Abort_IT+0xa4>
 800215e:	2310      	movs	r3, #16
 8002160:	e000      	b.n	8002164 <HAL_DMA_Abort_IT+0xa4>
 8002162:	2301      	movs	r3, #1
 8002164:	4a11      	ldr	r2, [pc, #68]	@ (80021ac <HAL_DMA_Abort_IT+0xec>)
 8002166:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
    } 
  }
  return status;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40020008 	.word	0x40020008
 8002198:	4002001c 	.word	0x4002001c
 800219c:	40020030 	.word	0x40020030
 80021a0:	40020044 	.word	0x40020044
 80021a4:	40020058 	.word	0x40020058
 80021a8:	4002006c 	.word	0x4002006c
 80021ac:	40020000 	.word	0x40020000

080021b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b08b      	sub	sp, #44	@ 0x2c
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c2:	e169      	b.n	8002498 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021c4:	2201      	movs	r2, #1
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	429a      	cmp	r2, r3
 80021de:	f040 8158 	bne.w	8002492 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4a9a      	ldr	r2, [pc, #616]	@ (8002450 <HAL_GPIO_Init+0x2a0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d05e      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
 80021ec:	4a98      	ldr	r2, [pc, #608]	@ (8002450 <HAL_GPIO_Init+0x2a0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d875      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 80021f2:	4a98      	ldr	r2, [pc, #608]	@ (8002454 <HAL_GPIO_Init+0x2a4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d058      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
 80021f8:	4a96      	ldr	r2, [pc, #600]	@ (8002454 <HAL_GPIO_Init+0x2a4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d86f      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 80021fe:	4a96      	ldr	r2, [pc, #600]	@ (8002458 <HAL_GPIO_Init+0x2a8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d052      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
 8002204:	4a94      	ldr	r2, [pc, #592]	@ (8002458 <HAL_GPIO_Init+0x2a8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d869      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 800220a:	4a94      	ldr	r2, [pc, #592]	@ (800245c <HAL_GPIO_Init+0x2ac>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d04c      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
 8002210:	4a92      	ldr	r2, [pc, #584]	@ (800245c <HAL_GPIO_Init+0x2ac>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d863      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 8002216:	4a92      	ldr	r2, [pc, #584]	@ (8002460 <HAL_GPIO_Init+0x2b0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d046      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
 800221c:	4a90      	ldr	r2, [pc, #576]	@ (8002460 <HAL_GPIO_Init+0x2b0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d85d      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 8002222:	2b12      	cmp	r3, #18
 8002224:	d82a      	bhi.n	800227c <HAL_GPIO_Init+0xcc>
 8002226:	2b12      	cmp	r3, #18
 8002228:	d859      	bhi.n	80022de <HAL_GPIO_Init+0x12e>
 800222a:	a201      	add	r2, pc, #4	@ (adr r2, 8002230 <HAL_GPIO_Init+0x80>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	080022ab 	.word	0x080022ab
 8002234:	08002285 	.word	0x08002285
 8002238:	08002297 	.word	0x08002297
 800223c:	080022d9 	.word	0x080022d9
 8002240:	080022df 	.word	0x080022df
 8002244:	080022df 	.word	0x080022df
 8002248:	080022df 	.word	0x080022df
 800224c:	080022df 	.word	0x080022df
 8002250:	080022df 	.word	0x080022df
 8002254:	080022df 	.word	0x080022df
 8002258:	080022df 	.word	0x080022df
 800225c:	080022df 	.word	0x080022df
 8002260:	080022df 	.word	0x080022df
 8002264:	080022df 	.word	0x080022df
 8002268:	080022df 	.word	0x080022df
 800226c:	080022df 	.word	0x080022df
 8002270:	080022df 	.word	0x080022df
 8002274:	0800228d 	.word	0x0800228d
 8002278:	080022a1 	.word	0x080022a1
 800227c:	4a79      	ldr	r2, [pc, #484]	@ (8002464 <HAL_GPIO_Init+0x2b4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002282:	e02c      	b.n	80022de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	623b      	str	r3, [r7, #32]
          break;
 800228a:	e029      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	3304      	adds	r3, #4
 8002292:	623b      	str	r3, [r7, #32]
          break;
 8002294:	e024      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	3308      	adds	r3, #8
 800229c:	623b      	str	r3, [r7, #32]
          break;
 800229e:	e01f      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	330c      	adds	r3, #12
 80022a6:	623b      	str	r3, [r7, #32]
          break;
 80022a8:	e01a      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022b2:	2304      	movs	r3, #4
 80022b4:	623b      	str	r3, [r7, #32]
          break;
 80022b6:	e013      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c0:	2308      	movs	r3, #8
 80022c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	611a      	str	r2, [r3, #16]
          break;
 80022ca:	e009      	b.n	80022e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022cc:	2308      	movs	r3, #8
 80022ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	615a      	str	r2, [r3, #20]
          break;
 80022d6:	e003      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
          break;
 80022dc:	e000      	b.n	80022e0 <HAL_GPIO_Init+0x130>
          break;
 80022de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	2bff      	cmp	r3, #255	@ 0xff
 80022e4:	d801      	bhi.n	80022ea <HAL_GPIO_Init+0x13a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	e001      	b.n	80022ee <HAL_GPIO_Init+0x13e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2bff      	cmp	r3, #255	@ 0xff
 80022f4:	d802      	bhi.n	80022fc <HAL_GPIO_Init+0x14c>
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	e002      	b.n	8002302 <HAL_GPIO_Init+0x152>
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	3b08      	subs	r3, #8
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	210f      	movs	r1, #15
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	401a      	ands	r2, r3
 8002314:	6a39      	ldr	r1, [r7, #32]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	431a      	orrs	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80b1 	beq.w	8002492 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002330:	4b4d      	ldr	r3, [pc, #308]	@ (8002468 <HAL_GPIO_Init+0x2b8>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	4a4c      	ldr	r2, [pc, #304]	@ (8002468 <HAL_GPIO_Init+0x2b8>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6193      	str	r3, [r2, #24]
 800233c:	4b4a      	ldr	r3, [pc, #296]	@ (8002468 <HAL_GPIO_Init+0x2b8>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002348:	4a48      	ldr	r2, [pc, #288]	@ (800246c <HAL_GPIO_Init+0x2bc>)
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002354:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	220f      	movs	r2, #15
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a40      	ldr	r2, [pc, #256]	@ (8002470 <HAL_GPIO_Init+0x2c0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <HAL_GPIO_Init+0x1ec>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3f      	ldr	r2, [pc, #252]	@ (8002474 <HAL_GPIO_Init+0x2c4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00d      	beq.n	8002398 <HAL_GPIO_Init+0x1e8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a3e      	ldr	r2, [pc, #248]	@ (8002478 <HAL_GPIO_Init+0x2c8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d007      	beq.n	8002394 <HAL_GPIO_Init+0x1e4>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a3d      	ldr	r2, [pc, #244]	@ (800247c <HAL_GPIO_Init+0x2cc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d101      	bne.n	8002390 <HAL_GPIO_Init+0x1e0>
 800238c:	2303      	movs	r3, #3
 800238e:	e006      	b.n	800239e <HAL_GPIO_Init+0x1ee>
 8002390:	2304      	movs	r3, #4
 8002392:	e004      	b.n	800239e <HAL_GPIO_Init+0x1ee>
 8002394:	2302      	movs	r3, #2
 8002396:	e002      	b.n	800239e <HAL_GPIO_Init+0x1ee>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_GPIO_Init+0x1ee>
 800239c:	2300      	movs	r3, #0
 800239e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a0:	f002 0203 	and.w	r2, r2, #3
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	4093      	lsls	r3, r2
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023ae:	492f      	ldr	r1, [pc, #188]	@ (800246c <HAL_GPIO_Init+0x2bc>)
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	3302      	adds	r3, #2
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	492c      	ldr	r1, [pc, #176]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	43db      	mvns	r3, r3
 80023de:	4928      	ldr	r1, [pc, #160]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023f0:	4b23      	ldr	r3, [pc, #140]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	4922      	ldr	r1, [pc, #136]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60cb      	str	r3, [r1, #12]
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023fe:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	43db      	mvns	r3, r3
 8002406:	491e      	ldr	r1, [pc, #120]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 8002408:	4013      	ands	r3, r2
 800240a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d006      	beq.n	8002426 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002418:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4918      	ldr	r1, [pc, #96]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002426:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	43db      	mvns	r3, r3
 800242e:	4914      	ldr	r1, [pc, #80]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 8002430:	4013      	ands	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d021      	beq.n	8002484 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002440:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	490e      	ldr	r1, [pc, #56]	@ (8002480 <HAL_GPIO_Init+0x2d0>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
 800244c:	e021      	b.n	8002492 <HAL_GPIO_Init+0x2e2>
 800244e:	bf00      	nop
 8002450:	10320000 	.word	0x10320000
 8002454:	10310000 	.word	0x10310000
 8002458:	10220000 	.word	0x10220000
 800245c:	10210000 	.word	0x10210000
 8002460:	10120000 	.word	0x10120000
 8002464:	10110000 	.word	0x10110000
 8002468:	40021000 	.word	0x40021000
 800246c:	40010000 	.word	0x40010000
 8002470:	40010800 	.word	0x40010800
 8002474:	40010c00 	.word	0x40010c00
 8002478:	40011000 	.word	0x40011000
 800247c:	40011400 	.word	0x40011400
 8002480:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <HAL_GPIO_Init+0x304>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	43db      	mvns	r3, r3
 800248c:	4909      	ldr	r1, [pc, #36]	@ (80024b4 <HAL_GPIO_Init+0x304>)
 800248e:	4013      	ands	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	3301      	adds	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f47f ae8e 	bne.w	80021c4 <HAL_GPIO_Init+0x14>
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	372c      	adds	r7, #44	@ 0x2c
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	40010400 	.word	0x40010400

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024d4:	e003      	b.n	80024de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	041a      	lsls	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	611a      	str	r2, [r3, #16]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e272      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8087 	beq.w	8002616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002508:	4b92      	ldr	r3, [pc, #584]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b04      	cmp	r3, #4
 8002512:	d00c      	beq.n	800252e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002514:	4b8f      	ldr	r3, [pc, #572]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d112      	bne.n	8002546 <HAL_RCC_OscConfig+0x5e>
 8002520:	4b8c      	ldr	r3, [pc, #560]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800252c:	d10b      	bne.n	8002546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252e:	4b89      	ldr	r3, [pc, #548]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d06c      	beq.n	8002614 <HAL_RCC_OscConfig+0x12c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d168      	bne.n	8002614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e24c      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x76>
 8002550:	4b80      	ldr	r3, [pc, #512]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a7f      	ldr	r2, [pc, #508]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e02e      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x98>
 8002566:	4b7b      	ldr	r3, [pc, #492]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7a      	ldr	r2, [pc, #488]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b78      	ldr	r3, [pc, #480]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a77      	ldr	r2, [pc, #476]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0xbc>
 800258a:	4b72      	ldr	r3, [pc, #456]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a71      	ldr	r2, [pc, #452]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b6f      	ldr	r3, [pc, #444]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6e      	ldr	r2, [pc, #440]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 80025a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b68      	ldr	r3, [pc, #416]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a67      	ldr	r2, [pc, #412]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff fc06 	bl	8001dd4 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff fc02 	bl	8001dd4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e200      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b5d      	ldr	r3, [pc, #372]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xe4>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fbf2 	bl	8001dd4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff fbee 	bl	8001dd4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1ec      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b53      	ldr	r3, [pc, #332]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x10c>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d063      	beq.n	80026ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002622:	4b4c      	ldr	r3, [pc, #304]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800262e:	4b49      	ldr	r3, [pc, #292]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d11c      	bne.n	8002674 <HAL_RCC_OscConfig+0x18c>
 800263a:	4b46      	ldr	r3, [pc, #280]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	4b43      	ldr	r3, [pc, #268]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x176>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1c0      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b3d      	ldr	r3, [pc, #244]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4939      	ldr	r1, [pc, #228]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	e03a      	b.n	80026ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267c:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7ff fba7 	bl	8001dd4 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7ff fba3 	bl	8001dd4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1a1      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	4b2d      	ldr	r3, [pc, #180]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4927      	ldr	r1, [pc, #156]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	e015      	b.n	80026ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026be:	4b26      	ldr	r3, [pc, #152]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff fb86 	bl	8001dd4 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7ff fb82 	bl	8001dd4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e180      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d03a      	beq.n	800276c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	4b17      	ldr	r3, [pc, #92]	@ (800275c <HAL_RCC_OscConfig+0x274>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002704:	f7ff fb66 	bl	8001dd4 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7ff fb62 	bl	8001dd4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e160      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800272a:	2001      	movs	r0, #1
 800272c:	f000 face 	bl	8002ccc <RCC_Delay>
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002732:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <HAL_RCC_OscConfig+0x274>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7ff fb4c 	bl	8001dd4 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273e:	e00f      	b.n	8002760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002740:	f7ff fb48 	bl	8001dd4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d908      	bls.n	8002760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e146      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	42420000 	.word	0x42420000
 800275c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	4b92      	ldr	r3, [pc, #584]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e9      	bne.n	8002740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a6 	beq.w	80028c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277e:	4b8b      	ldr	r3, [pc, #556]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10d      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b88      	ldr	r3, [pc, #544]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a87      	ldr	r2, [pc, #540]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]
 8002796:	4b85      	ldr	r3, [pc, #532]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a2:	2301      	movs	r3, #1
 80027a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	4b82      	ldr	r3, [pc, #520]	@ (80029b0 <HAL_RCC_OscConfig+0x4c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d118      	bne.n	80027e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b2:	4b7f      	ldr	r3, [pc, #508]	@ (80029b0 <HAL_RCC_OscConfig+0x4c8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a7e      	ldr	r2, [pc, #504]	@ (80029b0 <HAL_RCC_OscConfig+0x4c8>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027be:	f7ff fb09 	bl	8001dd4 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c6:	f7ff fb05 	bl	8001dd4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	@ 0x64
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e103      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	4b75      	ldr	r3, [pc, #468]	@ (80029b0 <HAL_RCC_OscConfig+0x4c8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x312>
 80027ec:	4b6f      	ldr	r3, [pc, #444]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4a6e      	ldr	r2, [pc, #440]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6213      	str	r3, [r2, #32]
 80027f8:	e02d      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x334>
 8002802:	4b6a      	ldr	r3, [pc, #424]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a69      	ldr	r2, [pc, #420]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	4b67      	ldr	r3, [pc, #412]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a66      	ldr	r2, [pc, #408]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	6213      	str	r3, [r2, #32]
 800281a:	e01c      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b05      	cmp	r3, #5
 8002822:	d10c      	bne.n	800283e <HAL_RCC_OscConfig+0x356>
 8002824:	4b61      	ldr	r3, [pc, #388]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4a60      	ldr	r2, [pc, #384]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6213      	str	r3, [r2, #32]
 8002830:	4b5e      	ldr	r3, [pc, #376]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a5d      	ldr	r2, [pc, #372]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	e00b      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 800283e:	4b5b      	ldr	r3, [pc, #364]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a5a      	ldr	r2, [pc, #360]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	6213      	str	r3, [r2, #32]
 800284a:	4b58      	ldr	r3, [pc, #352]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a57      	ldr	r2, [pc, #348]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d015      	beq.n	800288a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7ff fab9 	bl	8001dd4 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7ff fab5 	bl	8001dd4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0b1      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287c:	4b4b      	ldr	r3, [pc, #300]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ee      	beq.n	8002866 <HAL_RCC_OscConfig+0x37e>
 8002888:	e014      	b.n	80028b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288a:	f7ff faa3 	bl	8001dd4 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7ff fa9f 	bl	8001dd4 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e09b      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a8:	4b40      	ldr	r3, [pc, #256]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ee      	bne.n	8002892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d105      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ba:	4b3c      	ldr	r3, [pc, #240]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a3b      	ldr	r2, [pc, #236]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8087 	beq.w	80029de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d0:	4b36      	ldr	r3, [pc, #216]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d061      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d146      	bne.n	8002972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b33      	ldr	r3, [pc, #204]	@ (80029b4 <HAL_RCC_OscConfig+0x4cc>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7ff fa73 	bl	8001dd4 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7ff fa6f 	bl	8001dd4 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e06d      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002904:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002918:	d108      	bne.n	800292c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800291a:	4b24      	ldr	r3, [pc, #144]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4921      	ldr	r1, [pc, #132]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292c:	4b1f      	ldr	r3, [pc, #124]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a19      	ldr	r1, [r3, #32]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	430b      	orrs	r3, r1
 800293e:	491b      	ldr	r1, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002944:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <HAL_RCC_OscConfig+0x4cc>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7ff fa43 	bl	8001dd4 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002952:	f7ff fa3f 	bl	8001dd4 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e03d      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x46a>
 8002970:	e035      	b.n	80029de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <HAL_RCC_OscConfig+0x4cc>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7ff fa2c 	bl	8001dd4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7ff fa28 	bl	8001dd4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e026      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_RCC_OscConfig+0x4c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x498>
 800299e:	e01e      	b.n	80029de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e019      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40007000 	.word	0x40007000
 80029b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b8:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <HAL_RCC_OscConfig+0x500>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000

080029ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0d0      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b6a      	ldr	r3, [pc, #424]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d910      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b67      	ldr	r3, [pc, #412]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4965      	ldr	r1, [pc, #404]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b63      	ldr	r3, [pc, #396]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b8      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a48:	4b59      	ldr	r3, [pc, #356]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4a58      	ldr	r2, [pc, #352]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a60:	4b53      	ldr	r3, [pc, #332]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a52      	ldr	r2, [pc, #328]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6c:	4b50      	ldr	r3, [pc, #320]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	494d      	ldr	r1, [pc, #308]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d040      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d115      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e07f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aaa:	4b41      	ldr	r3, [pc, #260]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e073      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aba:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06b      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aca:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f023 0203 	bic.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4936      	ldr	r1, [pc, #216]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002adc:	f7ff f97a 	bl	8001dd4 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	e00a      	b.n	8002afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae4:	f7ff f976 	bl	8001dd4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e053      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 020c 	and.w	r2, r3, #12
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d1eb      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b27      	ldr	r3, [pc, #156]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d210      	bcs.n	8002b3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b24      	ldr	r3, [pc, #144]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0207 	bic.w	r2, r3, #7
 8002b22:	4922      	ldr	r1, [pc, #136]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e032      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4916      	ldr	r1, [pc, #88]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b66:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	490e      	ldr	r1, [pc, #56]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7a:	f000 f821 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	490a      	ldr	r1, [pc, #40]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8c:	5ccb      	ldrb	r3, [r1, r3]
 8002b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b92:	4a09      	ldr	r2, [pc, #36]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b96:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_RCC_ClockConfig+0x1d0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff f8d8 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08004924 	.word	0x08004924
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bda:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d002      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x30>
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x36>
 8002bee:	e027      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf2:	613b      	str	r3, [r7, #16]
      break;
 8002bf4:	e027      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	0c9b      	lsrs	r3, r3, #18
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	4a17      	ldr	r2, [pc, #92]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c00:	5cd3      	ldrb	r3, [r2, r3]
 8002c02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c0e:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	0c5b      	lsrs	r3, r3, #17
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	4a11      	ldr	r2, [pc, #68]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a0d      	ldr	r2, [pc, #52]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c22:	fb03 f202 	mul.w	r2, r3, r2
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e004      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a0c      	ldr	r2, [pc, #48]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
      break;
 8002c3e:	e002      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c42:	613b      	str	r3, [r7, #16]
      break;
 8002c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c46:	693b      	ldr	r3, [r7, #16]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	007a1200 	.word	0x007a1200
 8002c5c:	0800493c 	.word	0x0800493c
 8002c60:	0800494c 	.word	0x0800494c
 8002c64:	003d0900 	.word	0x003d0900

08002c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c6c:	4b02      	ldr	r3, [pc, #8]	@ (8002c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	20000000 	.word	0x20000000

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c80:	f7ff fff2 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4903      	ldr	r1, [pc, #12]	@ (8002ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08004934 	.word	0x08004934

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca8:	f7ff ffde 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	0adb      	lsrs	r3, r3, #11
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4903      	ldr	r1, [pc, #12]	@ (8002cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	08004934 	.word	0x08004934

08002ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <RCC_Delay+0x34>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <RCC_Delay+0x38>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0a5b      	lsrs	r3, r3, #9
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ce8:	bf00      	nop
  }
  while (Delay --);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1e5a      	subs	r2, r3, #1
 8002cee:	60fa      	str	r2, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f9      	bne.n	8002ce8 <RCC_Delay+0x1c>
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	20000000 	.word	0x20000000
 8002d04:	10624dd3 	.word	0x10624dd3

08002d08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e076      	b.n	8002e08 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d108      	bne.n	8002d34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d2a:	d009      	beq.n	8002d40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	61da      	str	r2, [r3, #28]
 8002d32:	e005      	b.n	8002d40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe fd92 	bl	8001884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc4:	ea42 0103 	orr.w	r1, r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dcc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	0c1a      	lsrs	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f002 0204 	and.w	r2, r2, #4
 8002de6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002df6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e20:	f7fe ffd8 	bl	8001dd4 <HAL_GetTick>
 8002e24:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d001      	beq.n	8002e3a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002e36:	2302      	movs	r3, #2
 8002e38:	e12a      	b.n	8003090 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_SPI_Transmit+0x36>
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e122      	b.n	8003090 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_SPI_Transmit+0x48>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e11b      	b.n	8003090 <HAL_SPI_Transmit+0x280>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2203      	movs	r2, #3
 8002e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ec6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed2:	2b40      	cmp	r3, #64	@ 0x40
 8002ed4:	d007      	beq.n	8002ee6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eee:	d152      	bne.n	8002f96 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_SPI_Transmit+0xee>
 8002ef8:	8b7b      	ldrh	r3, [r7, #26]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d145      	bne.n	8002f8a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	881a      	ldrh	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	1c9a      	adds	r2, r3, #2
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f22:	e032      	b.n	8002f8a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d112      	bne.n	8002f58 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	881a      	ldrh	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	1c9a      	adds	r2, r3, #2
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f56:	e018      	b.n	8002f8a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f58:	f7fe ff3c 	bl	8001dd4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d803      	bhi.n	8002f70 <HAL_SPI_Transmit+0x160>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6e:	d102      	bne.n	8002f76 <HAL_SPI_Transmit+0x166>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e082      	b.n	8003090 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1c7      	bne.n	8002f24 <HAL_SPI_Transmit+0x114>
 8002f94:	e053      	b.n	800303e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Transmit+0x194>
 8002f9e:	8b7b      	ldrh	r3, [r7, #26]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d147      	bne.n	8003034 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	330c      	adds	r3, #12
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fca:	e033      	b.n	8003034 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d113      	bne.n	8003002 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	7812      	ldrb	r2, [r2, #0]
 8002fe6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003000:	e018      	b.n	8003034 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003002:	f7fe fee7 	bl	8001dd4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d803      	bhi.n	800301a <HAL_SPI_Transmit+0x20a>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d102      	bne.n	8003020 <HAL_SPI_Transmit+0x210>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d109      	bne.n	8003034 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e02d      	b.n	8003090 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1c6      	bne.n	8002fcc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f8b0 	bl	80031a8 <SPI_EndRxTxTransaction>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10a      	bne.n	8003072 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800308e:	2300      	movs	r3, #0
  }
}
 8003090:	4618      	mov	r0, r3
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030a8:	f7fe fe94 	bl	8001dd4 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	4413      	add	r3, r2
 80030b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030b8:	f7fe fe8c 	bl	8001dd4 <HAL_GetTick>
 80030bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030be:	4b39      	ldr	r3, [pc, #228]	@ (80031a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	015b      	lsls	r3, r3, #5
 80030c4:	0d1b      	lsrs	r3, r3, #20
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ce:	e054      	b.n	800317a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d6:	d050      	beq.n	800317a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030d8:	f7fe fe7c 	bl	8001dd4 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d902      	bls.n	80030ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d13d      	bne.n	800316a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003106:	d111      	bne.n	800312c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003110:	d004      	beq.n	800311c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800311a:	d107      	bne.n	800312c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800312a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003134:	d10f      	bne.n	8003156 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003154:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e017      	b.n	800319a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3b01      	subs	r3, #1
 8003178:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4013      	ands	r3, r2
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	bf0c      	ite	eq
 800318a:	2301      	moveq	r3, #1
 800318c:	2300      	movne	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	429a      	cmp	r2, r3
 8003196:	d19b      	bne.n	80030d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000000 	.word	0x20000000

080031a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2201      	movs	r2, #1
 80031bc:	2102      	movs	r1, #2
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff ff6a 	bl	8003098 <SPI_WaitFlagStateUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ce:	f043 0220 	orr.w	r2, r3, #32
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e013      	b.n	8003202 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2200      	movs	r2, #0
 80031e2:	2180      	movs	r1, #128	@ 0x80
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff ff57 	bl	8003098 <SPI_WaitFlagStateUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e000      	b.n	8003202 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e042      	b.n	80032a2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d106      	bne.n	8003236 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fe fb65 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2224      	movs	r2, #36	@ 0x24
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800324c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fcd4 	bl	8003bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003262:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003272:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003282:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	4613      	mov	r3, r2
 80032b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d112      	bne.n	80032ea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_UART_Receive_IT+0x26>
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e00b      	b.n	80032ec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	461a      	mov	r2, r3
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fab6 	bl	8003852 <UART_Start_Receive_IT>
 80032e6:	4603      	mov	r3, r0
 80032e8:	e000      	b.n	80032ec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80032ea:	2302      	movs	r3, #2
  }
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b0ba      	sub	sp, #232	@ 0xe8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003320:	2300      	movs	r3, #0
 8003322:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800333a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_UART_IRQHandler+0x66>
 8003346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fb93 	bl	8003a7e <UART_Receive_IT>
      return;
 8003358:	e25b      	b.n	8003812 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800335a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80de 	beq.w	8003520 <HAL_UART_IRQHandler+0x22c>
 8003364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d106      	bne.n	800337e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003374:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80d1 	beq.w	8003520 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800337e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_UART_IRQHandler+0xae>
 800338a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800338e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_UART_IRQHandler+0xd2>
 80033ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f043 0202 	orr.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_UART_IRQHandler+0xf6>
 80033d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f043 0204 	orr.w	r2, r3, #4
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d011      	beq.n	800341a <HAL_UART_IRQHandler+0x126>
 80033f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d105      	bne.n	800340e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d005      	beq.n	800341a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003412:	f043 0208 	orr.w	r2, r3, #8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 81f2 	beq.w	8003808 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_UART_IRQHandler+0x14e>
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fb1e 	bl	8003a7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d103      	bne.n	800346e <HAL_UART_IRQHandler+0x17a>
 8003466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d04f      	beq.n	800350e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fa28 	bl	80038c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d041      	beq.n	8003506 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3314      	adds	r3, #20
 8003488:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800349c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3314      	adds	r3, #20
 80034aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1d9      	bne.n	8003482 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d013      	beq.n	80034fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034da:	4a7e      	ldr	r2, [pc, #504]	@ (80036d4 <HAL_UART_IRQHandler+0x3e0>)
 80034dc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fdec 	bl	80020c0 <HAL_DMA_Abort_IT>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034f8:	4610      	mov	r0, r2
 80034fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fc:	e00e      	b.n	800351c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f993 	bl	800382a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003504:	e00a      	b.n	800351c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f98f 	bl	800382a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	e006      	b.n	800351c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f98b 	bl	800382a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800351a:	e175      	b.n	8003808 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	bf00      	nop
    return;
 800351e:	e173      	b.n	8003808 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003524:	2b01      	cmp	r3, #1
 8003526:	f040 814f 	bne.w	80037c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800352a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8148 	beq.w	80037c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8141 	beq.w	80037c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80b6 	beq.w	80036d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003578:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8145 	beq.w	800380c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800358a:	429a      	cmp	r2, r3
 800358c:	f080 813e 	bcs.w	800380c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003596:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b20      	cmp	r3, #32
 80035a0:	f000 8088 	beq.w	80036b4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035d0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80035e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1d9      	bne.n	80035a4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3314      	adds	r3, #20
 80035f6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003600:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3314      	adds	r3, #20
 8003610:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003614:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003618:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800361c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003620:	e841 2300 	strex	r3, r2, [r1]
 8003624:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003626:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e1      	bne.n	80035f0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3314      	adds	r3, #20
 8003632:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800363c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800363e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003642:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3314      	adds	r3, #20
 800364c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003650:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003652:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003656:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800365e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e3      	bne.n	800362c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	330c      	adds	r3, #12
 8003678:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003684:	f023 0310 	bic.w	r3, r3, #16
 8003688:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003696:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003698:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800369c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e3      	bne.n	8003672 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fccb 	bl	800204a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4619      	mov	r1, r3
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f8b6 	bl	800383c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036d0:	e09c      	b.n	800380c <HAL_UART_IRQHandler+0x518>
 80036d2:	bf00      	nop
 80036d4:	08003989 	.word	0x08003989
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 808e 	beq.w	8003810 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80036f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8089 	beq.w	8003810 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	330c      	adds	r3, #12
 8003704:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800370e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003714:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003722:	647a      	str	r2, [r7, #68]	@ 0x44
 8003724:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003728:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e3      	bne.n	80036fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3314      	adds	r3, #20
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	623b      	str	r3, [r7, #32]
   return(result);
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3314      	adds	r3, #20
 8003756:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800375a:	633a      	str	r2, [r7, #48]	@ 0x30
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e3      	bne.n	8003736 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	330c      	adds	r3, #12
 8003782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	60fb      	str	r3, [r7, #12]
   return(result);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0310 	bic.w	r3, r3, #16
 8003792:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037a0:	61fa      	str	r2, [r7, #28]
 80037a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	69b9      	ldr	r1, [r7, #24]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	617b      	str	r3, [r7, #20]
   return(result);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e3      	bne.n	800377c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f83b 	bl	800383c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037c6:	e023      	b.n	8003810 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <HAL_UART_IRQHandler+0x4f4>
 80037d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f8e5 	bl	80039b0 <UART_Transmit_IT>
    return;
 80037e6:	e014      	b.n	8003812 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00e      	beq.n	8003812 <HAL_UART_IRQHandler+0x51e>
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f924 	bl	8003a4e <UART_EndTransmit_IT>
    return;
 8003806:	e004      	b.n	8003812 <HAL_UART_IRQHandler+0x51e>
    return;
 8003808:	bf00      	nop
 800380a:	e002      	b.n	8003812 <HAL_UART_IRQHandler+0x51e>
      return;
 800380c:	bf00      	nop
 800380e:	e000      	b.n	8003812 <HAL_UART_IRQHandler+0x51e>
      return;
 8003810:	bf00      	nop
  }
}
 8003812:	37e8      	adds	r7, #232	@ 0xe8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	4613      	mov	r3, r2
 800385e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	88fa      	ldrh	r2, [r7, #6]
 800386a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2222      	movs	r2, #34	@ 0x22
 800387c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003896:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0220 	orr.w	r2, r2, #32
 80038b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b095      	sub	sp, #84	@ 0x54
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80038ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e5      	bne.n	80038cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3314      	adds	r3, #20
 8003906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f023 0301 	bic.w	r3, r3, #1
 8003916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3314      	adds	r3, #20
 800391e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003920:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e5      	bne.n	8003900 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003938:	2b01      	cmp	r3, #1
 800393a:	d119      	bne.n	8003970 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	60bb      	str	r3, [r7, #8]
   return(result);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f023 0310 	bic.w	r3, r3, #16
 8003952:	647b      	str	r3, [r7, #68]	@ 0x44
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330c      	adds	r3, #12
 800395a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800395c:	61ba      	str	r2, [r7, #24]
 800395e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6979      	ldr	r1, [r7, #20]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	613b      	str	r3, [r7, #16]
   return(result);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e5      	bne.n	800393c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800397e:	bf00      	nop
 8003980:	3754      	adds	r7, #84	@ 0x54
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff ff41 	bl	800382a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b21      	cmp	r3, #33	@ 0x21
 80039c2:	d13e      	bne.n	8003a42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039cc:	d114      	bne.n	80039f8 <UART_Transmit_IT+0x48>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d110      	bne.n	80039f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	621a      	str	r2, [r3, #32]
 80039f6:	e008      	b.n	8003a0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	1c59      	adds	r1, r3, #1
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6211      	str	r1, [r2, #32]
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4619      	mov	r1, r3
 8003a18:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10f      	bne.n	8003a3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e000      	b.n	8003a44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
  }
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fed2 	bl	8003818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b08c      	sub	sp, #48	@ 0x30
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b22      	cmp	r3, #34	@ 0x22
 8003a90:	f040 80ae 	bne.w	8003bf0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9c:	d117      	bne.n	8003ace <UART_Receive_IT+0x50>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d113      	bne.n	8003ace <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac6:	1c9a      	adds	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	629a      	str	r2, [r3, #40]	@ 0x28
 8003acc:	e026      	b.n	8003b1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae0:	d007      	beq.n	8003af2 <UART_Receive_IT+0x74>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <UART_Receive_IT+0x82>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e008      	b.n	8003b12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d15d      	bne.n	8003bec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0220 	bic.w	r2, r2, #32
 8003b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d135      	bne.n	8003be2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f023 0310 	bic.w	r3, r3, #16
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b9c:	623a      	str	r2, [r7, #32]
 8003b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	69f9      	ldr	r1, [r7, #28]
 8003ba2:	6a3a      	ldr	r2, [r7, #32]
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e5      	bne.n	8003b7c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d10a      	bne.n	8003bd4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bd8:	4619      	mov	r1, r3
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff fe2e 	bl	800383c <HAL_UARTEx_RxEventCallback>
 8003be0:	e002      	b.n	8003be8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fd fcaa 	bl	800153c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e002      	b.n	8003bf2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e000      	b.n	8003bf2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3730      	adds	r7, #48	@ 0x30
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c36:	f023 030c 	bic.w	r3, r3, #12
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	430b      	orrs	r3, r1
 8003c42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d10 <UART_SetConfig+0x114>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d103      	bne.n	8003c6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c64:	f7ff f81e 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	e002      	b.n	8003c72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f7ff f806 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8003c70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009a      	lsls	r2, r3, #2
 8003c7c:	441a      	add	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	4a22      	ldr	r2, [pc, #136]	@ (8003d14 <UART_SetConfig+0x118>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	0119      	lsls	r1, r3, #4
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009a      	lsls	r2, r3, #2
 8003c9c:	441a      	add	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d14 <UART_SetConfig+0x118>)
 8003caa:	fba3 0302 	umull	r0, r3, r3, r2
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2064      	movs	r0, #100	@ 0x64
 8003cb2:	fb00 f303 	mul.w	r3, r0, r3
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	3332      	adds	r3, #50	@ 0x32
 8003cbc:	4a15      	ldr	r2, [pc, #84]	@ (8003d14 <UART_SetConfig+0x118>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cc8:	4419      	add	r1, r3
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009a      	lsls	r2, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d14 <UART_SetConfig+0x118>)
 8003ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2064      	movs	r0, #100	@ 0x64
 8003cea:	fb00 f303 	mul.w	r3, r0, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	3332      	adds	r3, #50	@ 0x32
 8003cf4:	4a07      	ldr	r2, [pc, #28]	@ (8003d14 <UART_SetConfig+0x118>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	f003 020f 	and.w	r2, r3, #15
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	440a      	add	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40013800 	.word	0x40013800
 8003d14:	51eb851f 	.word	0x51eb851f

08003d18 <memset>:
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4402      	add	r2, r0
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d100      	bne.n	8003d22 <memset+0xa>
 8003d20:	4770      	bx	lr
 8003d22:	f803 1b01 	strb.w	r1, [r3], #1
 8003d26:	e7f9      	b.n	8003d1c <memset+0x4>

08003d28 <strncpy>:
 8003d28:	4603      	mov	r3, r0
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	3901      	subs	r1, #1
 8003d2e:	b132      	cbz	r2, 8003d3e <strncpy+0x16>
 8003d30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003d34:	3a01      	subs	r2, #1
 8003d36:	f803 4b01 	strb.w	r4, [r3], #1
 8003d3a:	2c00      	cmp	r4, #0
 8003d3c:	d1f7      	bne.n	8003d2e <strncpy+0x6>
 8003d3e:	2100      	movs	r1, #0
 8003d40:	441a      	add	r2, r3
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d100      	bne.n	8003d48 <strncpy+0x20>
 8003d46:	bd10      	pop	{r4, pc}
 8003d48:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4c:	e7f9      	b.n	8003d42 <strncpy+0x1a>
	...

08003d50 <__errno>:
 8003d50:	4b01      	ldr	r3, [pc, #4]	@ (8003d58 <__errno+0x8>)
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	2000000c 	.word	0x2000000c

08003d5c <__libc_init_array>:
 8003d5c:	b570      	push	{r4, r5, r6, lr}
 8003d5e:	2600      	movs	r6, #0
 8003d60:	4d0c      	ldr	r5, [pc, #48]	@ (8003d94 <__libc_init_array+0x38>)
 8003d62:	4c0d      	ldr	r4, [pc, #52]	@ (8003d98 <__libc_init_array+0x3c>)
 8003d64:	1b64      	subs	r4, r4, r5
 8003d66:	10a4      	asrs	r4, r4, #2
 8003d68:	42a6      	cmp	r6, r4
 8003d6a:	d109      	bne.n	8003d80 <__libc_init_array+0x24>
 8003d6c:	f000 f910 	bl	8003f90 <_init>
 8003d70:	2600      	movs	r6, #0
 8003d72:	4d0a      	ldr	r5, [pc, #40]	@ (8003d9c <__libc_init_array+0x40>)
 8003d74:	4c0a      	ldr	r4, [pc, #40]	@ (8003da0 <__libc_init_array+0x44>)
 8003d76:	1b64      	subs	r4, r4, r5
 8003d78:	10a4      	asrs	r4, r4, #2
 8003d7a:	42a6      	cmp	r6, r4
 8003d7c:	d105      	bne.n	8003d8a <__libc_init_array+0x2e>
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
 8003d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d84:	4798      	blx	r3
 8003d86:	3601      	adds	r6, #1
 8003d88:	e7ee      	b.n	8003d68 <__libc_init_array+0xc>
 8003d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8e:	4798      	blx	r3
 8003d90:	3601      	adds	r6, #1
 8003d92:	e7f2      	b.n	8003d7a <__libc_init_array+0x1e>
 8003d94:	08004960 	.word	0x08004960
 8003d98:	08004960 	.word	0x08004960
 8003d9c:	08004960 	.word	0x08004960
 8003da0:	08004964 	.word	0x08004964

08003da4 <sqrt>:
 8003da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da6:	4606      	mov	r6, r0
 8003da8:	460f      	mov	r7, r1
 8003daa:	f000 f81f 	bl	8003dec <__ieee754_sqrt>
 8003dae:	4632      	mov	r2, r6
 8003db0:	4604      	mov	r4, r0
 8003db2:	460d      	mov	r5, r1
 8003db4:	463b      	mov	r3, r7
 8003db6:	4630      	mov	r0, r6
 8003db8:	4639      	mov	r1, r7
 8003dba:	f7fc fe1d 	bl	80009f8 <__aeabi_dcmpun>
 8003dbe:	b990      	cbnz	r0, 8003de6 <sqrt+0x42>
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	4639      	mov	r1, r7
 8003dc8:	f7fc fdee 	bl	80009a8 <__aeabi_dcmplt>
 8003dcc:	b158      	cbz	r0, 8003de6 <sqrt+0x42>
 8003dce:	f7ff ffbf 	bl	8003d50 <__errno>
 8003dd2:	2321      	movs	r3, #33	@ 0x21
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	6003      	str	r3, [r0, #0]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f7fc fc9b 	bl	8000718 <__aeabi_ddiv>
 8003de2:	4604      	mov	r4, r0
 8003de4:	460d      	mov	r5, r1
 8003de6:	4620      	mov	r0, r4
 8003de8:	4629      	mov	r1, r5
 8003dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003dec <__ieee754_sqrt>:
 8003dec:	4a65      	ldr	r2, [pc, #404]	@ (8003f84 <__ieee754_sqrt+0x198>)
 8003dee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df2:	438a      	bics	r2, r1
 8003df4:	4606      	mov	r6, r0
 8003df6:	460f      	mov	r7, r1
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	d10e      	bne.n	8003e1c <__ieee754_sqrt+0x30>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	f7fc fb60 	bl	80004c4 <__aeabi_dmul>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4630      	mov	r0, r6
 8003e0a:	4639      	mov	r1, r7
 8003e0c:	f7fc f9a4 	bl	8000158 <__adddf3>
 8003e10:	4606      	mov	r6, r0
 8003e12:	460f      	mov	r7, r1
 8003e14:	4630      	mov	r0, r6
 8003e16:	4639      	mov	r1, r7
 8003e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e1c:	2900      	cmp	r1, #0
 8003e1e:	dc0c      	bgt.n	8003e3a <__ieee754_sqrt+0x4e>
 8003e20:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8003e24:	4302      	orrs	r2, r0
 8003e26:	d0f5      	beq.n	8003e14 <__ieee754_sqrt+0x28>
 8003e28:	b189      	cbz	r1, 8003e4e <__ieee754_sqrt+0x62>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	f7fc f992 	bl	8000154 <__aeabi_dsub>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	f7fc fc70 	bl	8000718 <__aeabi_ddiv>
 8003e38:	e7ea      	b.n	8003e10 <__ieee754_sqrt+0x24>
 8003e3a:	150a      	asrs	r2, r1, #20
 8003e3c:	d115      	bne.n	8003e6a <__ieee754_sqrt+0x7e>
 8003e3e:	2100      	movs	r1, #0
 8003e40:	e009      	b.n	8003e56 <__ieee754_sqrt+0x6a>
 8003e42:	0ae3      	lsrs	r3, r4, #11
 8003e44:	3a15      	subs	r2, #21
 8003e46:	0564      	lsls	r4, r4, #21
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0fa      	beq.n	8003e42 <__ieee754_sqrt+0x56>
 8003e4c:	e7f7      	b.n	8003e3e <__ieee754_sqrt+0x52>
 8003e4e:	460a      	mov	r2, r1
 8003e50:	e7fa      	b.n	8003e48 <__ieee754_sqrt+0x5c>
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	3101      	adds	r1, #1
 8003e56:	02d8      	lsls	r0, r3, #11
 8003e58:	d5fb      	bpl.n	8003e52 <__ieee754_sqrt+0x66>
 8003e5a:	1e48      	subs	r0, r1, #1
 8003e5c:	1a12      	subs	r2, r2, r0
 8003e5e:	f1c1 0020 	rsb	r0, r1, #32
 8003e62:	fa24 f000 	lsr.w	r0, r4, r0
 8003e66:	4303      	orrs	r3, r0
 8003e68:	408c      	lsls	r4, r1
 8003e6a:	2700      	movs	r7, #0
 8003e6c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8003e70:	2116      	movs	r1, #22
 8003e72:	07d2      	lsls	r2, r2, #31
 8003e74:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003e78:	463a      	mov	r2, r7
 8003e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e82:	bf5c      	itt	pl
 8003e84:	005b      	lslpl	r3, r3, #1
 8003e86:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8003e8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e8e:	bf58      	it	pl
 8003e90:	0064      	lslpl	r4, r4, #1
 8003e92:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003e96:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003e9a:	0064      	lsls	r4, r4, #1
 8003e9c:	1815      	adds	r5, r2, r0
 8003e9e:	429d      	cmp	r5, r3
 8003ea0:	bfde      	ittt	le
 8003ea2:	182a      	addle	r2, r5, r0
 8003ea4:	1b5b      	suble	r3, r3, r5
 8003ea6:	183f      	addle	r7, r7, r0
 8003ea8:	0fe5      	lsrs	r5, r4, #31
 8003eaa:	3901      	subs	r1, #1
 8003eac:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8003eb0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003eb4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003eb8:	d1f0      	bne.n	8003e9c <__ieee754_sqrt+0xb0>
 8003eba:	460d      	mov	r5, r1
 8003ebc:	2620      	movs	r6, #32
 8003ebe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	eb00 0c01 	add.w	ip, r0, r1
 8003ec8:	dc02      	bgt.n	8003ed0 <__ieee754_sqrt+0xe4>
 8003eca:	d113      	bne.n	8003ef4 <__ieee754_sqrt+0x108>
 8003ecc:	45a4      	cmp	ip, r4
 8003ece:	d811      	bhi.n	8003ef4 <__ieee754_sqrt+0x108>
 8003ed0:	f1bc 0f00 	cmp.w	ip, #0
 8003ed4:	eb0c 0100 	add.w	r1, ip, r0
 8003ed8:	da3e      	bge.n	8003f58 <__ieee754_sqrt+0x16c>
 8003eda:	2900      	cmp	r1, #0
 8003edc:	db3c      	blt.n	8003f58 <__ieee754_sqrt+0x16c>
 8003ede:	f102 0e01 	add.w	lr, r2, #1
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	4672      	mov	r2, lr
 8003ee6:	45a4      	cmp	ip, r4
 8003ee8:	bf88      	it	hi
 8003eea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003eee:	eba4 040c 	sub.w	r4, r4, ip
 8003ef2:	4405      	add	r5, r0
 8003ef4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8003ef8:	3e01      	subs	r6, #1
 8003efa:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8003efe:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003f02:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003f06:	d1dc      	bne.n	8003ec2 <__ieee754_sqrt+0xd6>
 8003f08:	431c      	orrs	r4, r3
 8003f0a:	d01a      	beq.n	8003f42 <__ieee754_sqrt+0x156>
 8003f0c:	4c1e      	ldr	r4, [pc, #120]	@ (8003f88 <__ieee754_sqrt+0x19c>)
 8003f0e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8003f8c <__ieee754_sqrt+0x1a0>
 8003f12:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003f16:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003f1a:	f7fc f91b 	bl	8000154 <__aeabi_dsub>
 8003f1e:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4650      	mov	r0, sl
 8003f28:	4659      	mov	r1, fp
 8003f2a:	f7fc fd47 	bl	80009bc <__aeabi_dcmple>
 8003f2e:	b140      	cbz	r0, 8003f42 <__ieee754_sqrt+0x156>
 8003f30:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003f34:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003f38:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f3c:	d10e      	bne.n	8003f5c <__ieee754_sqrt+0x170>
 8003f3e:	4635      	mov	r5, r6
 8003f40:	3701      	adds	r7, #1
 8003f42:	107b      	asrs	r3, r7, #1
 8003f44:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8003f48:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8003f4c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8003f50:	086b      	lsrs	r3, r5, #1
 8003f52:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8003f56:	e75b      	b.n	8003e10 <__ieee754_sqrt+0x24>
 8003f58:	4696      	mov	lr, r2
 8003f5a:	e7c2      	b.n	8003ee2 <__ieee754_sqrt+0xf6>
 8003f5c:	f7fc f8fc 	bl	8000158 <__adddf3>
 8003f60:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4650      	mov	r0, sl
 8003f6a:	4659      	mov	r1, fp
 8003f6c:	f7fc fd1c 	bl	80009a8 <__aeabi_dcmplt>
 8003f70:	b120      	cbz	r0, 8003f7c <__ieee754_sqrt+0x190>
 8003f72:	1cab      	adds	r3, r5, #2
 8003f74:	bf08      	it	eq
 8003f76:	3701      	addeq	r7, #1
 8003f78:	3502      	adds	r5, #2
 8003f7a:	e7e2      	b.n	8003f42 <__ieee754_sqrt+0x156>
 8003f7c:	1c6b      	adds	r3, r5, #1
 8003f7e:	f023 0501 	bic.w	r5, r3, #1
 8003f82:	e7de      	b.n	8003f42 <__ieee754_sqrt+0x156>
 8003f84:	7ff00000 	.word	0x7ff00000
 8003f88:	08004958 	.word	0x08004958
 8003f8c:	08004950 	.word	0x08004950

08003f90 <_init>:
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	bf00      	nop
 8003f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f96:	bc08      	pop	{r3}
 8003f98:	469e      	mov	lr, r3
 8003f9a:	4770      	bx	lr

08003f9c <_fini>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	bf00      	nop
 8003fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa2:	bc08      	pop	{r3}
 8003fa4:	469e      	mov	lr, r3
 8003fa6:	4770      	bx	lr
