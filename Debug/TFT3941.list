
TFT3941.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b90  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08003c9c  08003c9c  00004c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044cc  080044cc  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080044cc  080044cc  000054cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044d4  080044d4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d4  080044d4  000054d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044d8  080044d8  000054d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080044dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  2000000c  080044e8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  080044e8  000066f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee2f  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e0  00000000  00000000  00014e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00017248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbc  00000000  00000000  00018148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001858d  00000000  00000000  00018d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d7e  00000000  00000000  00031291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8dd  00000000  00000000  0004200f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce8ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003edc  00000000  00000000  000ce930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d280c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c84 	.word	0x08003c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003c84 	.word	0x08003c84

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <fullDplay>:
{
	ILI9341_Init();
}

void fullDplay(uint16_t color)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillScreen(color);
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	4618      	mov	r0, r3
 800016e:	f000 fcfb 	bl	8000b68 <ILI9341_FillScreen>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <ILI9341_DrawChar>:
		}
	}
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800017a:	b590      	push	{r4, r7, lr}
 800017c:	b0af      	sub	sp, #188	@ 0xbc
 800017e:	af02      	add	r7, sp, #8
 8000180:	60b9      	str	r1, [r7, #8]
 8000182:	4611      	mov	r1, r2
 8000184:	461a      	mov	r2, r3
 8000186:	4603      	mov	r3, r0
 8000188:	73fb      	strb	r3, [r7, #15]
 800018a:	460b      	mov	r3, r1
 800018c:	81bb      	strh	r3, [r7, #12]
 800018e:	4613      	mov	r3, r2
 8000190:	80fb      	strh	r3, [r7, #6]
	if ((ch < 32) || (ch > 127)) return;
 8000192:	7bfb      	ldrb	r3, [r7, #15]
 8000194:	2b1f      	cmp	r3, #31
 8000196:	f240 80f4 	bls.w	8000382 <ILI9341_DrawChar+0x208>
 800019a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	f2c0 80ef 	blt.w	8000382 <ILI9341_DrawChar+0x208>

	const uint8_t fOffset = font[0];
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
	const uint8_t fWidth = font[1];
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	3301      	adds	r3, #1
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
	const uint8_t fHeight = font[2];
 80001b6:	68bb      	ldr	r3, [r7, #8]
 80001b8:	3302      	adds	r3, #2
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
	const uint8_t fBPL = font[3];
 80001c0:	68bb      	ldr	r3, [r7, #8]
 80001c2:	3303      	adds	r3, #3
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98

	const uint8_t *tempChar = &font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	3b20      	subs	r3, #32
 80001ce:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 80001d2:	fb02 f303 	mul.w	r3, r2, r3
 80001d6:	3304      	adds	r3, #4
 80001d8:	68ba      	ldr	r2, [r7, #8]
 80001da:	4413      	add	r3, r2
 80001dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	uint8_t charWidth = tempChar[0];
 80001e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	if (charWidth == 0) charWidth = fWidth;
 80001ea:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d103      	bne.n	80001fa <ILI9341_DrawChar+0x80>
 80001f2:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 80001f6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	/* Clear background first (only the needed width) */
	ILI9341_DrawRectangle(X, Y, charWidth, fHeight, bgcolor);
 80001fa:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80001fe:	b29a      	uxth	r2, r3
 8000200:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000204:	b29c      	uxth	r4, r3
 8000206:	88f9      	ldrh	r1, [r7, #6]
 8000208:	89b8      	ldrh	r0, [r7, #12]
 800020a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 800020e:	9300      	str	r3, [sp, #0]
 8000210:	4623      	mov	r3, r4
 8000212:	f000 fcbb 	bl	8000b8c <ILI9341_DrawRectangle>

	// Buffer per-column to send pixel runs faster. We'll prepare a column buffer of height fHeight
	// and for each column send the pixels as a vertical strip.
	uint16_t colbuf[64]; // supports up to 64 px height; for larger fonts we fallback to DrawPixel

	if (fHeight <= 64) {
 8000216:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800021a:	2b40      	cmp	r3, #64	@ 0x40
 800021c:	d85d      	bhi.n	80002da <ILI9341_DrawChar+0x160>
		for (int i = 0; i < charWidth; i++) {
 800021e:	2300      	movs	r3, #0
 8000220:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000224:	e052      	b.n	80002cc <ILI9341_DrawChar+0x152>
			// build column
			for (int j = 0; j < fHeight; j++) {
 8000226:	2300      	movs	r3, #0
 8000228:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800022c:	e032      	b.n	8000294 <ILI9341_DrawChar+0x11a>
				uint8_t z = tempChar[fBPL * i + (j >> 3) + 1];
 800022e:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8000232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000236:	fb03 f202 	mul.w	r2, r3, r2
 800023a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800023e:	10db      	asrs	r3, r3, #3
 8000240:	4413      	add	r3, r2
 8000242:	3301      	adds	r3, #1
 8000244:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
				uint8_t b = 1 << (j & 0x07);
 8000250:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000254:	f003 0307 	and.w	r3, r3, #7
 8000258:	2201      	movs	r2, #1
 800025a:	fa02 f303 	lsl.w	r3, r2, r3
 800025e:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
				colbuf[j] = (z & b) ? color : bgcolor;
 8000262:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 8000266:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800026a:	4013      	ands	r3, r2
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d002      	beq.n	8000278 <ILI9341_DrawChar+0xfe>
 8000272:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	@ 0xc0
 8000276:	e001      	b.n	800027c <ILI9341_DrawChar+0x102>
 8000278:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	@ 0xc4
 800027c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	33b0      	adds	r3, #176	@ 0xb0
 8000284:	443b      	add	r3, r7
 8000286:	f823 2ca0 	strh.w	r2, [r3, #-160]
			for (int j = 0; j < fHeight; j++) {
 800028a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800028e:	3301      	adds	r3, #1
 8000290:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000294:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000298:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800029c:	429a      	cmp	r2, r3
 800029e:	dbc6      	blt.n	800022e <ILI9341_DrawChar+0xb4>
			}
			// write this column as a w=1, h=fHeight block
			ILI9341_WritePixels(X + i, Y, 1, fHeight, colbuf);
 80002a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	89bb      	ldrh	r3, [r7, #12]
 80002a8:	4413      	add	r3, r2
 80002aa:	b298      	uxth	r0, r3
 80002ac:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	88f9      	ldrh	r1, [r7, #6]
 80002b4:	f107 0310 	add.w	r3, r7, #16
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	4613      	mov	r3, r2
 80002bc:	2201      	movs	r2, #1
 80002be:	f000 fb53 	bl	8000968 <ILI9341_WritePixels>
		for (int i = 0; i < charWidth; i++) {
 80002c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80002c6:	3301      	adds	r3, #1
 80002c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80002cc:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80002d0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80002d4:	429a      	cmp	r2, r3
 80002d6:	dba6      	blt.n	8000226 <ILI9341_DrawChar+0xac>
 80002d8:	e054      	b.n	8000384 <ILI9341_DrawChar+0x20a>
		}
	} else {
		// fallback: draw per-pixel
		for (int j=0; j < fHeight; j++) {
 80002da:	2300      	movs	r3, #0
 80002dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80002e0:	e048      	b.n	8000374 <ILI9341_DrawChar+0x1fa>
			for (int i=0; i < charWidth; i++) {
 80002e2:	2300      	movs	r3, #0
 80002e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80002e8:	e039      	b.n	800035e <ILI9341_DrawChar+0x1e4>
				uint8_t z = tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1];
 80002ea:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80002ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80002f2:	fb03 f202 	mul.w	r2, r3, r2
 80002f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80002fa:	10db      	asrs	r3, r3, #3
 80002fc:	f003 031f 	and.w	r3, r3, #31
 8000300:	4413      	add	r3, r2
 8000302:	3301      	adds	r3, #1
 8000304:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000308:	4413      	add	r3, r2
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
				uint8_t b = 1 << (j & 0x07);
 8000310:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000314:	f003 0307 	and.w	r3, r3, #7
 8000318:	2201      	movs	r2, #1
 800031a:	fa02 f303 	lsl.w	r3, r2, r3
 800031e:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
				if (( z & b ) != 0x00) {
 8000322:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8000326:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800032a:	4013      	ands	r3, r2
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d010      	beq.n	8000354 <ILI9341_DrawChar+0x1da>
					ILI9341_DrawPixel(X+i, Y+j, color);
 8000332:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000336:	b29a      	uxth	r2, r3
 8000338:	89bb      	ldrh	r3, [r7, #12]
 800033a:	4413      	add	r3, r2
 800033c:	b298      	uxth	r0, r3
 800033e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000342:	b29a      	uxth	r2, r3
 8000344:	88fb      	ldrh	r3, [r7, #6]
 8000346:	4413      	add	r3, r2
 8000348:	b29b      	uxth	r3, r3
 800034a:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	@ 0xc0
 800034e:	4619      	mov	r1, r3
 8000350:	f000 fa5e 	bl	8000810 <ILI9341_DrawPixel>
			for (int i=0; i < charWidth; i++) {
 8000354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000358:	3301      	adds	r3, #1
 800035a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800035e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000362:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000366:	429a      	cmp	r2, r3
 8000368:	dbbf      	blt.n	80002ea <ILI9341_DrawChar+0x170>
		for (int j=0; j < fHeight; j++) {
 800036a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800036e:	3301      	adds	r3, #1
 8000370:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000374:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000378:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800037c:	429a      	cmp	r2, r3
 800037e:	dbb0      	blt.n	80002e2 <ILI9341_DrawChar+0x168>
 8000380:	e000      	b.n	8000384 <ILI9341_DrawChar+0x20a>
	if ((ch < 32) || (ch > 127)) return;
 8000382:	bf00      	nop
				}
			}
		}
	}
}
 8000384:	37b4      	adds	r7, #180	@ 0xb4
 8000386:	46bd      	mov	sp, r7
 8000388:	bd90      	pop	{r4, r7, pc}

0800038a <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800038a:	b580      	push	{r7, lr}
 800038c:	b08a      	sub	sp, #40	@ 0x28
 800038e:	af02      	add	r7, sp, #8
 8000390:	60f8      	str	r0, [r7, #12]
 8000392:	60b9      	str	r1, [r7, #8]
 8000394:	4611      	mov	r1, r2
 8000396:	461a      	mov	r2, r3
 8000398:	460b      	mov	r3, r1
 800039a:	80fb      	strh	r3, [r7, #6]
 800039c:	4613      	mov	r3, r2
 800039e:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	3301      	adds	r3, #1
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80003ae:	e02d      	b.n	800040c <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	7818      	ldrb	r0, [r3, #0]
 80003b4:	88b9      	ldrh	r1, [r7, #4]
 80003b6:	88fa      	ldrh	r2, [r7, #6]
 80003b8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	460b      	mov	r3, r1
 80003c2:	68b9      	ldr	r1, [r7, #8]
 80003c4:	f7ff fed9 	bl	800017a <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	3b20      	subs	r3, #32
 80003ce:	7ffa      	ldrb	r2, [r7, #31]
 80003d0:	fb02 f303 	mul.w	r3, r2, r3
 80003d4:	3304      	adds	r3, #4
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	4413      	add	r3, r2
 80003da:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80003dc:	69bb      	ldr	r3, [r7, #24]
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80003e2:	7dfb      	ldrb	r3, [r7, #23]
 80003e4:	1c9a      	adds	r2, r3, #2
 80003e6:	7fbb      	ldrb	r3, [r7, #30]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	da07      	bge.n	80003fc <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80003ec:	7dfb      	ldrb	r3, [r7, #23]
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	88fb      	ldrh	r3, [r7, #6]
 80003f2:	4413      	add	r3, r2
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	3302      	adds	r3, #2
 80003f8:	80fb      	strh	r3, [r7, #6]
 80003fa:	e004      	b.n	8000406 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 80003fc:	7fbb      	ldrb	r3, [r7, #30]
 80003fe:	b29a      	uxth	r2, r3
 8000400:	88fb      	ldrh	r3, [r7, #6]
 8000402:	4413      	add	r3, r2
 8000404:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	3301      	adds	r3, #1
 800040a:	60fb      	str	r3, [r7, #12]
	while (*str)
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1cd      	bne.n	80003b0 <ILI9341_DrawText+0x26>
	}
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <showUARTLine>:

void showUARTLine(const char *line) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af02      	add	r7, sp, #8
 8000426:	6078      	str	r0, [r7, #4]

   // ILI9341_DrawText(line, FONT2, 10, 10, 0x0000, 0xFFFF);
	 // Green text on yellow background
	//ILI9341_FillRect(0, 0, 220, 240, 0xCFEB); // blue background
   // ILI9341_FillRect(0, 0, 220, 240, 0xFFFF); // white border
    ILI9341_DrawText(line,FONT2, 20, 30, 0x0000, 0xFFFF);
 8000428:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	2300      	movs	r3, #0
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	231e      	movs	r3, #30
 8000434:	2214      	movs	r2, #20
 8000436:	4916      	ldr	r1, [pc, #88]	@ (8000490 <showUARTLine+0x70>)
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f7ff ffa6 	bl	800038a <ILI9341_DrawText>
	
    // Vẽ vùng góc la bàn
    ILI9341_FillRect(220, 0, 100, 120, 0xCFEB);
 800043e:	f64c 73eb 	movw	r3, #53227	@ 0xcfeb
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2378      	movs	r3, #120	@ 0x78
 8000446:	2264      	movs	r2, #100	@ 0x64
 8000448:	2100      	movs	r1, #0
 800044a:	20dc      	movs	r0, #220	@ 0xdc
 800044c:	f000 fa0a 	bl	8000864 <ILI9341_FillRect>
    ILI9341_FillRect(220, 0, 100, 120, 0xFFFF);
 8000450:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2378      	movs	r3, #120	@ 0x78
 8000458:	2264      	movs	r2, #100	@ 0x64
 800045a:	2100      	movs	r1, #0
 800045c:	20dc      	movs	r0, #220	@ 0xdc
 800045e:	f000 fa01 	bl	8000864 <ILI9341_FillRect>
   // ILI9341_DrawText(data33, FONT2, 230, 30, 0xFFFF, 0xCFEB);

    // Vẽ vùng báo relay
    ILI9341_FillRect(220, 120, 100, 120, 0xCFEB);
 8000462:	f64c 73eb 	movw	r3, #53227	@ 0xcfeb
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	2378      	movs	r3, #120	@ 0x78
 800046a:	2264      	movs	r2, #100	@ 0x64
 800046c:	2178      	movs	r1, #120	@ 0x78
 800046e:	20dc      	movs	r0, #220	@ 0xdc
 8000470:	f000 f9f8 	bl	8000864 <ILI9341_FillRect>
    ILI9341_FillRect(220, 120, 100, 120, 0xFFFF);
 8000474:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2378      	movs	r3, #120	@ 0x78
 800047c:	2264      	movs	r2, #100	@ 0x64
 800047e:	2178      	movs	r1, #120	@ 0x78
 8000480:	20dc      	movs	r0, #220	@ 0xdc
 8000482:	f000 f9ef 	bl	8000864 <ILI9341_FillRect>
  
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	08003cbc 	.word	0x08003cbc

08000494 <ClearScreen>:
void ClearScreen(const char *line)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    if (strcmp(line, "clear") == 0)
 800049c:	4908      	ldr	r1, [pc, #32]	@ (80004c0 <ClearScreen+0x2c>)
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff fe54 	bl	800014c <strcmp>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d104      	bne.n	80004b4 <ClearScreen+0x20>
    {
        fullDplay(0xFFFF); // White
 80004aa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80004ae:	f7ff fe57 	bl	8000160 <fullDplay>
        return;
 80004b2:	e002      	b.n	80004ba <ClearScreen+0x26>
    }
	else {
		showUARTLine(line);
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f7ff ffb3 	bl	8000420 <showUARTLine>
	}
}
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	08003c9c 	.word	0x08003c9c

080004c4 <ILI9341_Select>:
#include <string.h>

extern SPI_HandleTypeDef hspi1; // defined in main.c

// Local helpers
static void ILI9341_Select(void)  { HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET); }
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	2200      	movs	r2, #0
 80004ca:	2101      	movs	r1, #1
 80004cc:	4802      	ldr	r0, [pc, #8]	@ (80004d8 <ILI9341_Select+0x14>)
 80004ce:	f001 fbc1 	bl	8001c54 <HAL_GPIO_WritePin>
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40010c00 	.word	0x40010c00

080004dc <ILI9341_Unselect>:
static void ILI9341_Unselect(void){ HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_SET); }
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
 80004e0:	2201      	movs	r2, #1
 80004e2:	2101      	movs	r1, #1
 80004e4:	4802      	ldr	r0, [pc, #8]	@ (80004f0 <ILI9341_Unselect+0x14>)
 80004e6:	f001 fbb5 	bl	8001c54 <HAL_GPIO_WritePin>
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40010c00 	.word	0x40010c00

080004f4 <ILI9341_DC_Command>:
static void ILI9341_DC_Command(void){ HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_RESET); }
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	2200      	movs	r2, #0
 80004fa:	2102      	movs	r1, #2
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <ILI9341_DC_Command+0x14>)
 80004fe:	f001 fba9 	bl	8001c54 <HAL_GPIO_WritePin>
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010c00 	.word	0x40010c00

0800050c <ILI9341_DC_Data>:
static void ILI9341_DC_Data(void)   { HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET); }
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
 8000510:	2201      	movs	r2, #1
 8000512:	2102      	movs	r1, #2
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <ILI9341_DC_Data+0x14>)
 8000516:	f001 fb9d 	bl	8001c54 <HAL_GPIO_WritePin>
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40010c00 	.word	0x40010c00

08000524 <ILI9341_WriteCmd>:

void ILI9341_WriteCmd(uint8_t cmd)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
  ILI9341_Select();
 800052e:	f7ff ffc9 	bl	80004c4 <ILI9341_Select>
  ILI9341_DC_Command();
 8000532:	f7ff ffdf 	bl	80004f4 <ILI9341_DC_Command>
  HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000536:	1df9      	adds	r1, r7, #7
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	2201      	movs	r2, #1
 800053e:	4804      	ldr	r0, [pc, #16]	@ (8000550 <ILI9341_WriteCmd+0x2c>)
 8000540:	f002 f834 	bl	80025ac <HAL_SPI_Transmit>
  ILI9341_Unselect();
 8000544:	f7ff ffca 	bl	80004dc <ILI9341_Unselect>
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000128 	.word	0x20000128

08000554 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t* buff, uint16_t len)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
  if(len == 0) return;
 8000560:	887b      	ldrh	r3, [r7, #2]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d00d      	beq.n	8000582 <ILI9341_WriteData+0x2e>
  ILI9341_Select();
 8000566:	f7ff ffad 	bl	80004c4 <ILI9341_Select>
  ILI9341_DC_Data();
 800056a:	f7ff ffcf 	bl	800050c <ILI9341_DC_Data>
  HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 800056e:	887a      	ldrh	r2, [r7, #2]
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	6879      	ldr	r1, [r7, #4]
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <ILI9341_WriteData+0x38>)
 8000578:	f002 f818 	bl	80025ac <HAL_SPI_Transmit>
  ILI9341_Unselect();
 800057c:	f7ff ffae 	bl	80004dc <ILI9341_Unselect>
 8000580:	e000      	b.n	8000584 <ILI9341_WriteData+0x30>
  if(len == 0) return;
 8000582:	bf00      	nop
}
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000128 	.word	0x20000128

08000590 <ILI9341_SetAddrWindow>:

// Set address window (column/page)
static void ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	4604      	mov	r4, r0
 8000598:	4608      	mov	r0, r1
 800059a:	4611      	mov	r1, r2
 800059c:	461a      	mov	r2, r3
 800059e:	4623      	mov	r3, r4
 80005a0:	80fb      	strh	r3, [r7, #6]
 80005a2:	4603      	mov	r3, r0
 80005a4:	80bb      	strh	r3, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	807b      	strh	r3, [r7, #2]
 80005aa:	4613      	mov	r3, r2
 80005ac:	803b      	strh	r3, [r7, #0]
  uint8_t data[4];
  // Column addr (0x2A)
  ILI9341_WriteCmd(0x2A);
 80005ae:	202a      	movs	r0, #42	@ 0x2a
 80005b0:	f7ff ffb8 	bl	8000524 <ILI9341_WriteCmd>
  data[0] = (x0 >> 8) & 0xFF; data[1] = x0 & 0xFF;
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	733b      	strb	r3, [r7, #12]
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	737b      	strb	r3, [r7, #13]
  data[2] = (x1 >> 8) & 0xFF; data[3] = x1 & 0xFF;
 80005c4:	887b      	ldrh	r3, [r7, #2]
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	73bb      	strb	r3, [r7, #14]
 80005ce:	887b      	ldrh	r3, [r7, #2]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	73fb      	strb	r3, [r7, #15]
  ILI9341_WriteData(data, 4);
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2104      	movs	r1, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ffba 	bl	8000554 <ILI9341_WriteData>

  // Page addr (0x2B)
  ILI9341_WriteCmd(0x2B);
 80005e0:	202b      	movs	r0, #43	@ 0x2b
 80005e2:	f7ff ff9f 	bl	8000524 <ILI9341_WriteCmd>
  data[0] = (y0 >> 8) & 0xFF; data[1] = y0 & 0xFF;
 80005e6:	88bb      	ldrh	r3, [r7, #4]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	733b      	strb	r3, [r7, #12]
 80005f0:	88bb      	ldrh	r3, [r7, #4]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	737b      	strb	r3, [r7, #13]
  data[2] = (y1 >> 8) & 0xFF; data[3] = y1 & 0xFF;
 80005f6:	883b      	ldrh	r3, [r7, #0]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	73bb      	strb	r3, [r7, #14]
 8000600:	883b      	ldrh	r3, [r7, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	73fb      	strb	r3, [r7, #15]
  ILI9341_WriteData(data, 4);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2104      	movs	r1, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffa1 	bl	8000554 <ILI9341_WriteData>

  // Memory write (0x2C) will follow by the caller
  ILI9341_WriteCmd(0x2C);
 8000612:	202c      	movs	r0, #44	@ 0x2c
 8000614:	f7ff ff86 	bl	8000524 <ILI9341_WriteCmd>
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	bd90      	pop	{r4, r7, pc}

08000620 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08e      	sub	sp, #56	@ 0x38
 8000624:	af00      	add	r7, sp, #0
  // Reset sequence
  HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800062c:	4871      	ldr	r0, [pc, #452]	@ (80007f4 <ILI9341_Init+0x1d4>)
 800062e:	f001 fb11 	bl	8001c54 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000632:	2014      	movs	r0, #20
 8000634:	f000 ffa6 	bl	8001584 <HAL_Delay>
  HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800063e:	486d      	ldr	r0, [pc, #436]	@ (80007f4 <ILI9341_Init+0x1d4>)
 8000640:	f001 fb08 	bl	8001c54 <HAL_GPIO_WritePin>
  HAL_Delay(150);
 8000644:	2096      	movs	r0, #150	@ 0x96
 8000646:	f000 ff9d 	bl	8001584 <HAL_Delay>

  // Basic init commands (small, common subset)
  ILI9341_WriteCmd(0xEF);
 800064a:	20ef      	movs	r0, #239	@ 0xef
 800064c:	f7ff ff6a 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t efdata[] = {0x03,0x80,0x02}; ILI9341_WriteData(efdata, sizeof(efdata));
 8000650:	4a69      	ldr	r2, [pc, #420]	@ (80007f8 <ILI9341_Init+0x1d8>)
 8000652:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000656:	6812      	ldr	r2, [r2, #0]
 8000658:	4611      	mov	r1, r2
 800065a:	8019      	strh	r1, [r3, #0]
 800065c:	3302      	adds	r3, #2
 800065e:	0c12      	lsrs	r2, r2, #16
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000666:	2103      	movs	r1, #3
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff73 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xCF);
 800066e:	20cf      	movs	r0, #207	@ 0xcf
 8000670:	f7ff ff58 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t cfdata[] = {0x00,0xC1,0x30}; ILI9341_WriteData(cfdata, sizeof(cfdata));
 8000674:	4a61      	ldr	r2, [pc, #388]	@ (80007fc <ILI9341_Init+0x1dc>)
 8000676:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800067a:	6812      	ldr	r2, [r2, #0]
 800067c:	4611      	mov	r1, r2
 800067e:	8019      	strh	r1, [r3, #0]
 8000680:	3302      	adds	r3, #2
 8000682:	0c12      	lsrs	r2, r2, #16
 8000684:	701a      	strb	r2, [r3, #0]
 8000686:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800068a:	2103      	movs	r1, #3
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff61 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xED);
 8000692:	20ed      	movs	r0, #237	@ 0xed
 8000694:	f7ff ff46 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t eddata[] = {0x64,0x03,0x12,0x81}; ILI9341_WriteData(eddata, sizeof(eddata));
 8000698:	4b59      	ldr	r3, [pc, #356]	@ (8000800 <ILI9341_Init+0x1e0>)
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800069c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006a0:	2104      	movs	r1, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff56 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xE8);
 80006a8:	20e8      	movs	r0, #232	@ 0xe8
 80006aa:	f7ff ff3b 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t e8data[] = {0x85,0x00,0x78}; ILI9341_WriteData(e8data, sizeof(e8data));
 80006ae:	4a55      	ldr	r2, [pc, #340]	@ (8000804 <ILI9341_Init+0x1e4>)
 80006b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	4611      	mov	r1, r2
 80006b8:	8019      	strh	r1, [r3, #0]
 80006ba:	3302      	adds	r3, #2
 80006bc:	0c12      	lsrs	r2, r2, #16
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006c4:	2103      	movs	r1, #3
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff44 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xCB);
 80006cc:	20cb      	movs	r0, #203	@ 0xcb
 80006ce:	f7ff ff29 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t cbdata[] = {0x39,0x2C,0x00,0x34,0x02}; ILI9341_WriteData(cbdata, sizeof(cbdata));
 80006d2:	4a4d      	ldr	r2, [pc, #308]	@ (8000808 <ILI9341_Init+0x1e8>)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006dc:	6018      	str	r0, [r3, #0]
 80006de:	3304      	adds	r3, #4
 80006e0:	7019      	strb	r1, [r3, #0]
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2105      	movs	r1, #5
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff33 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xF7);
 80006ee:	20f7      	movs	r0, #247	@ 0xf7
 80006f0:	f7ff ff18 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t f7data[] = {0x20}; ILI9341_WriteData(f7data, sizeof(f7data));
 80006f4:	2320      	movs	r3, #32
 80006f6:	773b      	strb	r3, [r7, #28]
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	2101      	movs	r1, #1
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff28 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xEA);
 8000704:	20ea      	movs	r0, #234	@ 0xea
 8000706:	f7ff ff0d 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t eadata[] = {0x00,0x00}; ILI9341_WriteData(eadata, sizeof(eadata));
 800070a:	2300      	movs	r3, #0
 800070c:	833b      	strh	r3, [r7, #24]
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	2102      	movs	r1, #2
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff1d 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xC0); // Power control
 800071a:	20c0      	movs	r0, #192	@ 0xc0
 800071c:	f7ff ff02 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t c0data[] = {0x23}; ILI9341_WriteData(c0data, sizeof(c0data));
 8000720:	2323      	movs	r3, #35	@ 0x23
 8000722:	753b      	strb	r3, [r7, #20]
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2101      	movs	r1, #1
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff12 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xC1);
 8000730:	20c1      	movs	r0, #193	@ 0xc1
 8000732:	f7ff fef7 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t c1data[] = {0x10}; ILI9341_WriteData(c1data, sizeof(c1data));
 8000736:	2310      	movs	r3, #16
 8000738:	743b      	strb	r3, [r7, #16]
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	2101      	movs	r1, #1
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff07 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xC5); // VCOM control
 8000746:	20c5      	movs	r0, #197	@ 0xc5
 8000748:	f7ff feec 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t c5data[] = {0x3e, 0x28}; ILI9341_WriteData(c5data, sizeof(c5data));
 800074c:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000750:	81bb      	strh	r3, [r7, #12]
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2102      	movs	r1, #2
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fefb 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xC7); // VCOM control 2
 800075e:	20c7      	movs	r0, #199	@ 0xc7
 8000760:	f7ff fee0 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t c7data[] = {0x86}; ILI9341_WriteData(c7data, sizeof(c7data));
 8000764:	2386      	movs	r3, #134	@ 0x86
 8000766:	723b      	strb	r3, [r7, #8]
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2101      	movs	r1, #1
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fef0 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0x36); // Memory Access Control 
 8000774:	2036      	movs	r0, #54	@ 0x36
 8000776:	f7ff fed5 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t madctl = 0x40; ILI9341_WriteData(&madctl, 1);  //0x48 // MX, BGR 0x40 MX flag like trước nhưng BGR bit = 0 -> RGB
 800077a:	2340      	movs	r3, #64	@ 0x40
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fee6 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0x3A); // Pixel Format
 8000788:	203a      	movs	r0, #58	@ 0x3a
 800078a:	f7ff fecb 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t pixfmt = 0x55; // 16-bit/pixel
 800078e:	2355      	movs	r3, #85	@ 0x55
 8000790:	71bb      	strb	r3, [r7, #6]
  ILI9341_WriteData(&pixfmt, 1);
 8000792:	1dbb      	adds	r3, r7, #6
 8000794:	2101      	movs	r1, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fedc 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xB1);
 800079c:	20b1      	movs	r0, #177	@ 0xb1
 800079e:	f7ff fec1 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t b1data[] = {0x00,0x18}; ILI9341_WriteData(b1data, sizeof(b1data));
 80007a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007a6:	80bb      	strh	r3, [r7, #4]
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2102      	movs	r1, #2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fed1 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0xB6); // Display Function Control
 80007b2:	20b6      	movs	r0, #182	@ 0xb6
 80007b4:	f7ff feb6 	bl	8000524 <ILI9341_WriteCmd>
  uint8_t b6data[] = {0x08,0x82,0x27}; ILI9341_WriteData(b6data, sizeof(b6data));
 80007b8:	4a14      	ldr	r2, [pc, #80]	@ (800080c <ILI9341_Init+0x1ec>)
 80007ba:	463b      	mov	r3, r7
 80007bc:	6812      	ldr	r2, [r2, #0]
 80007be:	4611      	mov	r1, r2
 80007c0:	8019      	strh	r1, [r3, #0]
 80007c2:	3302      	adds	r3, #2
 80007c4:	0c12      	lsrs	r2, r2, #16
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	463b      	mov	r3, r7
 80007ca:	2103      	movs	r1, #3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fec1 	bl	8000554 <ILI9341_WriteData>

  ILI9341_WriteCmd(0x11); // Sleep out
 80007d2:	2011      	movs	r0, #17
 80007d4:	f7ff fea6 	bl	8000524 <ILI9341_WriteCmd>
  HAL_Delay(120);
 80007d8:	2078      	movs	r0, #120	@ 0x78
 80007da:	f000 fed3 	bl	8001584 <HAL_Delay>

  ILI9341_WriteCmd(0x29); // Display on
 80007de:	2029      	movs	r0, #41	@ 0x29
 80007e0:	f7ff fea0 	bl	8000524 <ILI9341_WriteCmd>
  HAL_Delay(20);
 80007e4:	2014      	movs	r0, #20
 80007e6:	f000 fecd 	bl	8001584 <HAL_Delay>
}
 80007ea:	bf00      	nop
 80007ec:	3738      	adds	r7, #56	@ 0x38
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40010c00 	.word	0x40010c00
 80007f8:	08003ca4 	.word	0x08003ca4
 80007fc:	08003ca8 	.word	0x08003ca8
 8000800:	81120364 	.word	0x81120364
 8000804:	08003cac 	.word	0x08003cac
 8000808:	08003cb0 	.word	0x08003cb0
 800080c:	08003cb8 	.word	0x08003cb8

08000810 <ILI9341_DrawPixel>:

// Draw a single pixel (uses set window + 2-byte color)
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
 800081a:	460b      	mov	r3, r1
 800081c:	80bb      	strh	r3, [r7, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	807b      	strh	r3, [r7, #2]
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000828:	d217      	bcs.n	800085a <ILI9341_DrawPixel+0x4a>
 800082a:	88bb      	ldrh	r3, [r7, #4]
 800082c:	2bef      	cmp	r3, #239	@ 0xef
 800082e:	d814      	bhi.n	800085a <ILI9341_DrawPixel+0x4a>
  ILI9341_SetAddrWindow(x, y, x, y);
 8000830:	88bb      	ldrh	r3, [r7, #4]
 8000832:	88fa      	ldrh	r2, [r7, #6]
 8000834:	88b9      	ldrh	r1, [r7, #4]
 8000836:	88f8      	ldrh	r0, [r7, #6]
 8000838:	f7ff feaa 	bl	8000590 <ILI9341_SetAddrWindow>
  uint8_t data[2] = { (uint8_t)(color >> 8) ,(uint8_t)(color & 0xFF)};
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	0a1b      	lsrs	r3, r3, #8
 8000840:	b29b      	uxth	r3, r3
 8000842:	b2db      	uxtb	r3, r3
 8000844:	733b      	strb	r3, [r7, #12]
 8000846:	887b      	ldrh	r3, [r7, #2]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	737b      	strb	r3, [r7, #13]
  ILI9341_WriteData(data, 2);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2102      	movs	r1, #2
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fe7e 	bl	8000554 <ILI9341_WriteData>
 8000858:	e000      	b.n	800085c <ILI9341_DrawPixel+0x4c>
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 800085a:	bf00      	nop
}
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <ILI9341_FillRect>:

// Fill a rectangle with a color (blocking). Uses a small chunk buffer to avoid huge stack.
void ILI9341_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	4604      	mov	r4, r0
 800086c:	4608      	mov	r0, r1
 800086e:	4611      	mov	r1, r2
 8000870:	461a      	mov	r2, r3
 8000872:	4623      	mov	r3, r4
 8000874:	80fb      	strh	r3, [r7, #6]
 8000876:	4603      	mov	r3, r0
 8000878:	80bb      	strh	r3, [r7, #4]
 800087a:	460b      	mov	r3, r1
 800087c:	807b      	strh	r3, [r7, #2]
 800087e:	4613      	mov	r3, r2
 8000880:	803b      	strh	r3, [r7, #0]
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000888:	d265      	bcs.n	8000956 <ILI9341_FillRect+0xf2>
 800088a:	88bb      	ldrh	r3, [r7, #4]
 800088c:	2bef      	cmp	r3, #239	@ 0xef
 800088e:	d862      	bhi.n	8000956 <ILI9341_FillRect+0xf2>
  if((x + w - 1) >= ILI9341_TFTWIDTH)  w = ILI9341_TFTWIDTH - x;
 8000890:	88fa      	ldrh	r2, [r7, #6]
 8000892:	887b      	ldrh	r3, [r7, #2]
 8000894:	4413      	add	r3, r2
 8000896:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800089a:	dd03      	ble.n	80008a4 <ILI9341_FillRect+0x40>
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80008a2:	807b      	strh	r3, [r7, #2]
  if((y + h - 1) >= ILI9341_TFTHEIGHT) h = ILI9341_TFTHEIGHT - y;
 80008a4:	88ba      	ldrh	r2, [r7, #4]
 80008a6:	883b      	ldrh	r3, [r7, #0]
 80008a8:	4413      	add	r3, r2
 80008aa:	2bf0      	cmp	r3, #240	@ 0xf0
 80008ac:	dd03      	ble.n	80008b6 <ILI9341_FillRect+0x52>
 80008ae:	88bb      	ldrh	r3, [r7, #4]
 80008b0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80008b4:	803b      	strh	r3, [r7, #0]

  ILI9341_SetAddrWindow(x, y, x + w - 1, y + h - 1);
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	887b      	ldrh	r3, [r7, #2]
 80008ba:	4413      	add	r3, r2
 80008bc:	b29b      	uxth	r3, r3
 80008be:	3b01      	subs	r3, #1
 80008c0:	b29c      	uxth	r4, r3
 80008c2:	88ba      	ldrh	r2, [r7, #4]
 80008c4:	883b      	ldrh	r3, [r7, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	3b01      	subs	r3, #1
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	88b9      	ldrh	r1, [r7, #4]
 80008d0:	88f8      	ldrh	r0, [r7, #6]
 80008d2:	4622      	mov	r2, r4
 80008d4:	f7ff fe5c 	bl	8000590 <ILI9341_SetAddrWindow>

  uint32_t pixels = (uint32_t)w * h;
 80008d8:	887b      	ldrh	r3, [r7, #2]
 80008da:	883a      	ldrh	r2, [r7, #0]
 80008dc:	fb02 f303 	mul.w	r3, r2, r3
 80008e0:	617b      	str	r3, [r7, #20]
  // Use a chunk to limit RAM usage. Make buffer static to avoid large stack frames.
  uint16_t chunkPixels = 128;
 80008e2:	2380      	movs	r3, #128	@ 0x80
 80008e4:	823b      	strh	r3, [r7, #16]
  static uint8_t buf[128 * 2]; // 2 bytes per pixel, static to conserve stack
  for(uint16_t i = 0; i < chunkPixels; i++) {
 80008e6:	2300      	movs	r3, #0
 80008e8:	827b      	strh	r3, [r7, #18]
 80008ea:	e011      	b.n	8000910 <ILI9341_FillRect+0xac>
    buf[i*2] = (uint8_t)(color >> 8);
 80008ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	8a7b      	ldrh	r3, [r7, #18]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	b2d1      	uxtb	r1, r2
 80008f8:	4a19      	ldr	r2, [pc, #100]	@ (8000960 <ILI9341_FillRect+0xfc>)
 80008fa:	54d1      	strb	r1, [r2, r3]
    buf[i*2+1] = (uint8_t)(color & 0xFF);
 80008fc:	8a7b      	ldrh	r3, [r7, #18]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	3301      	adds	r3, #1
 8000902:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000904:	b2d1      	uxtb	r1, r2
 8000906:	4a16      	ldr	r2, [pc, #88]	@ (8000960 <ILI9341_FillRect+0xfc>)
 8000908:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i = 0; i < chunkPixels; i++) {
 800090a:	8a7b      	ldrh	r3, [r7, #18]
 800090c:	3301      	adds	r3, #1
 800090e:	827b      	strh	r3, [r7, #18]
 8000910:	8a7a      	ldrh	r2, [r7, #18]
 8000912:	8a3b      	ldrh	r3, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d3e9      	bcc.n	80008ec <ILI9341_FillRect+0x88>
  }

  ILI9341_Select();
 8000918:	f7ff fdd4 	bl	80004c4 <ILI9341_Select>
  ILI9341_DC_Data();
 800091c:	f7ff fdf6 	bl	800050c <ILI9341_DC_Data>
  while(pixels) {
 8000920:	e013      	b.n	800094a <ILI9341_FillRect+0xe6>
    uint32_t toSend = (pixels > chunkPixels) ? chunkPixels : pixels;
 8000922:	8a3b      	ldrh	r3, [r7, #16]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	4293      	cmp	r3, r2
 8000928:	bf28      	it	cs
 800092a:	4613      	movcs	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
    HAL_SPI_Transmit(&hspi1, buf, toSend * 2, HAL_MAX_DELAY);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	b29b      	uxth	r3, r3
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	b29a      	uxth	r2, r3
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	4909      	ldr	r1, [pc, #36]	@ (8000960 <ILI9341_FillRect+0xfc>)
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <ILI9341_FillRect+0x100>)
 800093e:	f001 fe35 	bl	80025ac <HAL_SPI_Transmit>
    pixels -= toSend;
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	1ad3      	subs	r3, r2, r3
 8000948:	617b      	str	r3, [r7, #20]
  while(pixels) {
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1e8      	bne.n	8000922 <ILI9341_FillRect+0xbe>
  }
  ILI9341_Unselect();
 8000950:	f7ff fdc4 	bl	80004dc <ILI9341_Unselect>
 8000954:	e000      	b.n	8000958 <ILI9341_FillRect+0xf4>
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 8000956:	bf00      	nop
}
 8000958:	371c      	adds	r7, #28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	bf00      	nop
 8000960:	20000028 	.word	0x20000028
 8000964:	20000128 	.word	0x20000128

08000968 <ILI9341_WritePixels>:

// Write a block of pixels (16-bit RGB565). This avoids per-pixel SetAddrWindow calls
// when the caller has a buffer ready. pixels is an array of uint16_t in native endianness;
// this function will send high byte then low byte for each pixel.
void ILI9341_WritePixels(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *pixels)
{
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b0c8      	sub	sp, #288	@ 0x120
 800096c:	af00      	add	r7, sp, #0
 800096e:	4605      	mov	r5, r0
 8000970:	460c      	mov	r4, r1
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800097a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800097e:	462a      	mov	r2, r5
 8000980:	801a      	strh	r2, [r3, #0]
 8000982:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000986:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800098a:	4622      	mov	r2, r4
 800098c:	801a      	strh	r2, [r3, #0]
 800098e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000992:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8000996:	4602      	mov	r2, r0
 8000998:	801a      	strh	r2, [r3, #0]
 800099a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800099e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80009a2:	460a      	mov	r2, r1
 80009a4:	801a      	strh	r2, [r3, #0]
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 80009a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009aa:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009b4:	f080 80d0 	bcs.w	8000b58 <ILI9341_WritePixels+0x1f0>
 80009b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009bc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	2bef      	cmp	r3, #239	@ 0xef
 80009c4:	f200 80c8 	bhi.w	8000b58 <ILI9341_WritePixels+0x1f0>
  if((x + w - 1) >= ILI9341_TFTWIDTH)  w = ILI9341_TFTWIDTH - x;
 80009c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009cc:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80009d0:	881a      	ldrh	r2, [r3, #0]
 80009d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009d6:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	4413      	add	r3, r2
 80009de:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009e2:	dd0b      	ble.n	80009fc <ILI9341_WritePixels+0x94>
 80009e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80009e8:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80009ec:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80009f0:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80009f4:	8812      	ldrh	r2, [r2, #0]
 80009f6:	f5c2 72a0 	rsb	r2, r2, #320	@ 0x140
 80009fa:	801a      	strh	r2, [r3, #0]
  if((y + h - 1) >= ILI9341_TFTHEIGHT) h = ILI9341_TFTHEIGHT - y;
 80009fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a00:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000a04:	881a      	ldrh	r2, [r3, #0]
 8000a06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	4413      	add	r3, r2
 8000a12:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a14:	dd0b      	ble.n	8000a2e <ILI9341_WritePixels+0xc6>
 8000a16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a1a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000a1e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a22:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8000a26:	8812      	ldrh	r2, [r2, #0]
 8000a28:	f1c2 02f0 	rsb	r2, r2, #240	@ 0xf0
 8000a2c:	801a      	strh	r2, [r3, #0]

  ILI9341_SetAddrWindow(x, y, x + w - 1, y + h - 1);
 8000a2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a32:	f5a3 728d 	sub.w	r2, r3, #282	@ 0x11a
 8000a36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a3a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8000a3e:	8812      	ldrh	r2, [r2, #0]
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29c      	uxth	r4, r3
 8000a4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a4e:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 8000a52:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a56:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000a5a:	8812      	ldrh	r2, [r2, #0]
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	3b01      	subs	r3, #1
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a6a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000a6e:	8819      	ldrh	r1, [r3, #0]
 8000a70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a74:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000a78:	8818      	ldrh	r0, [r3, #0]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	4622      	mov	r2, r4
 8000a7e:	f7ff fd87 	bl	8000590 <ILI9341_SetAddrWindow>

  // Send pixel array as bytes (high byte first)
  ILI9341_Select();
 8000a82:	f7ff fd1f 	bl	80004c4 <ILI9341_Select>
  ILI9341_DC_Data();
 8000a86:	f7ff fd41 	bl	800050c <ILI9341_DC_Data>
  // We'll stream each pixel by converting to bytes in a small buffer
  uint8_t txbuf[128*2];
  uint32_t remaining = (uint32_t)w * h;
 8000a8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000a8e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000a98:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8000a9c:	8812      	ldrh	r2, [r2, #0]
 8000a9e:	fb02 f303 	mul.w	r3, r2, r3
 8000aa2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint32_t idx = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  while(remaining) {
 8000aac:	e04d      	b.n	8000b4a <ILI9341_WritePixels+0x1e2>
    uint32_t chunk = (remaining > 128) ? 128 : remaining;
 8000aae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000ab2:	2b80      	cmp	r3, #128	@ 0x80
 8000ab4:	bf28      	it	cs
 8000ab6:	2380      	movcs	r3, #128	@ 0x80
 8000ab8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    for(uint32_t i = 0; i < chunk; i++) {
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000ac2:	e029      	b.n	8000b18 <ILI9341_WritePixels+0x1b0>
      uint16_t p = pixels[idx++];
 8000ac4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8000ad4:	4413      	add	r3, r2
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      txbuf[i*2] = (uint8_t)(p >> 8);
 8000adc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	b2d1      	uxtb	r1, r2
 8000aec:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000af0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8000af4:	54d1      	strb	r1, [r2, r3]
      txbuf[i*2+1] = (uint8_t)(p & 0xFF);
 8000af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	3301      	adds	r3, #1
 8000afe:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8000b02:	b2d1      	uxtb	r1, r2
 8000b04:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000b08:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8000b0c:	54d1      	strb	r1, [r2, r3]
    for(uint32_t i = 0; i < chunk; i++) {
 8000b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b12:	3301      	adds	r3, #1
 8000b14:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000b18:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000b1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d3cf      	bcc.n	8000ac4 <ILI9341_WritePixels+0x15c>
    }
    HAL_SPI_Transmit(&hspi1, txbuf, chunk * 2, HAL_MAX_DELAY);
 8000b24:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	f107 010c 	add.w	r1, r7, #12
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	480b      	ldr	r0, [pc, #44]	@ (8000b64 <ILI9341_WritePixels+0x1fc>)
 8000b38:	f001 fd38 	bl	80025ac <HAL_SPI_Transmit>
    remaining -= chunk;
 8000b3c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000b40:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  while(remaining) {
 8000b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1ad      	bne.n	8000aae <ILI9341_WritePixels+0x146>
  }
  ILI9341_Unselect();
 8000b52:	f7ff fcc3 	bl	80004dc <ILI9341_Unselect>
 8000b56:	e000      	b.n	8000b5a <ILI9341_WritePixels+0x1f2>
  if(x >= ILI9341_TFTWIDTH || y >= ILI9341_TFTHEIGHT) return;
 8000b58:	bf00      	nop
}
 8000b5a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bdb0      	pop	{r4, r5, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000128 	.word	0x20000128

08000b68 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
  ILI9341_FillRect(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT, color);
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	23f0      	movs	r3, #240	@ 0xf0
 8000b78:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff fe70 	bl	8000864 <ILI9341_FillRect>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <ILI9341_DrawRectangle>:
  ILI9341_WriteData(&madctl, 1);
}

// Draw a filled rectangle (compatibility wrapper)
void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	4604      	mov	r4, r0
 8000b94:	4608      	mov	r0, r1
 8000b96:	4611      	mov	r1, r2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	80fb      	strh	r3, [r7, #6]
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80bb      	strh	r3, [r7, #4]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	807b      	strh	r3, [r7, #2]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	803b      	strh	r3, [r7, #0]
  // Use project macros for bounds
  if ((x >= ILI9341_TFTWIDTH) || (y >= ILI9341_TFTHEIGHT)) return;
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000bb0:	d21f      	bcs.n	8000bf2 <ILI9341_DrawRectangle+0x66>
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	2bef      	cmp	r3, #239	@ 0xef
 8000bb6:	d81c      	bhi.n	8000bf2 <ILI9341_DrawRectangle+0x66>

  if ((x + width - 1) >= ILI9341_TFTWIDTH) {
 8000bb8:	88fa      	ldrh	r2, [r7, #6]
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000bc2:	dd03      	ble.n	8000bcc <ILI9341_DrawRectangle+0x40>
    width = ILI9341_TFTWIDTH - x;
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000bca:	807b      	strh	r3, [r7, #2]
  }
  if ((y + height - 1) >= ILI9341_TFTHEIGHT) {
 8000bcc:	88ba      	ldrh	r2, [r7, #4]
 8000bce:	883b      	ldrh	r3, [r7, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	2bf0      	cmp	r3, #240	@ 0xf0
 8000bd4:	dd03      	ble.n	8000bde <ILI9341_DrawRectangle+0x52>
    height = ILI9341_TFTHEIGHT - y;
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000bdc:	803b      	strh	r3, [r7, #0]
  }

  // Reuse existing FillRect implementation which handles address window and fast fill
  ILI9341_FillRect(x, y, width, height, color);
 8000bde:	883c      	ldrh	r4, [r7, #0]
 8000be0:	887a      	ldrh	r2, [r7, #2]
 8000be2:	88b9      	ldrh	r1, [r7, #4]
 8000be4:	88f8      	ldrh	r0, [r7, #6]
 8000be6:	8b3b      	ldrh	r3, [r7, #24]
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	4623      	mov	r3, r4
 8000bec:	f7ff fe3a 	bl	8000864 <ILI9341_FillRect>
 8000bf0:	e000      	b.n	8000bf4 <ILI9341_DrawRectangle+0x68>
  if ((x >= ILI9341_TFTWIDTH) || (y >= ILI9341_TFTHEIGHT)) return;
 8000bf2:	bf00      	nop
}
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd90      	pop	{r4, r7, pc}
	...

08000bfc <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if (huart == &huart1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <HAL_UART_RxCpltCallback+0x1c>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d101      	bne.n	8000c10 <HAL_UART_RxCpltCallback+0x14>
    UARTDisplay_RxCplt();
 8000c0c:	f000 fbf0 	bl	80013f0 <UARTDisplay_RxCplt>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200001c8 	.word	0x200001c8

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 fc4e 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f82e 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 f948 	bl	8000ebc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c2c:	f000 f870 	bl	8000d10 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c30:	f000 f8f0 	bl	8000e14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c34:	f000 f918 	bl	8000e68 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c38:	f000 f8a0 	bl	8000d7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // DC high
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2102      	movs	r1, #2
 8000c40:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <main+0x58>)
 8000c42:	f001 f807 	bl	8001c54 <HAL_GPIO_WritePin>
    ILI9341_Init();
 8000c46:	f7ff fceb 	bl	8000620 <ILI9341_Init>
    UARTDisplay_Init(&huart1);         // start RX IT trên huart1
 8000c4a:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <main+0x5c>)
 8000c4c:	f000 fb14 	bl	8001278 <UARTDisplay_Init>
    UARTDisplay_SetLineCallback(showUARTLine); // đăng ký callback
 8000c50:	480a      	ldr	r0, [pc, #40]	@ (8000c7c <main+0x60>)
 8000c52:	f000 fb3b 	bl	80012cc <UARTDisplay_SetLineCallback>
    UARTDisplay_SetLineCallback(ClearScreen);
 8000c56:	480a      	ldr	r0, [pc, #40]	@ (8000c80 <main+0x64>)
 8000c58:	f000 fb38 	bl	80012cc <UARTDisplay_SetLineCallback>

    ILI9341_FillScreen(0xFFFF); // White
 8000c5c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c60:	f7ff ff82 	bl	8000b68 <ILI9341_FillScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    UARTDisplay_Process();
 8000c64:	f000 fb40 	bl	80012e8 <UARTDisplay_Process>
	    HAL_Delay(1000);
 8000c68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c6c:	f000 fc8a 	bl	8001584 <HAL_Delay>
	    UARTDisplay_Process();
 8000c70:	bf00      	nop
 8000c72:	e7f7      	b.n	8000c64 <main+0x48>
 8000c74:	40010c00 	.word	0x40010c00
 8000c78:	200001c8 	.word	0x200001c8
 8000c7c:	08000421 	.word	0x08000421
 8000c80:	08000495 	.word	0x08000495

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b090      	sub	sp, #64	@ 0x40
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	2228      	movs	r2, #40	@ 0x28
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 ffb6 	bl	8003c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000caa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cc2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 0318 	add.w	r3, r7, #24
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 ffd9 	bl	8001c84 <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cd8:	f000 f93c 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cdc:	230f      	movs	r3, #15
 8000cde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 fa46 	bl	8002188 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d02:	f000 f927 	bl	8000f54 <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3740      	adds	r7, #64	@ 0x40
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d14:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d16:	4a18      	ldr	r2, [pc, #96]	@ (8000d78 <MX_SPI1_Init+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d54:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <MX_SPI1_Init+0x64>)
 8000d62:	f001 fb9f 	bl	80024a4 <HAL_SPI_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d6c:	f000 f8f2 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000128 	.word	0x20000128
 8000d78:	40013000 	.word	0x40013000

08000d7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d98:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <MX_TIM2_Init+0x94>)
 8000d9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <MX_TIM2_Init+0x94>)
 8000da2:	2247      	movs	r2, #71	@ 0x47
 8000da4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_TIM2_Init+0x94>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000dac:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <MX_TIM2_Init+0x94>)
 8000dae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000db2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db4:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <MX_TIM2_Init+0x94>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <MX_TIM2_Init+0x94>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc0:	4813      	ldr	r0, [pc, #76]	@ (8000e10 <MX_TIM2_Init+0x94>)
 8000dc2:	f001 fdf0 	bl	80029a6 <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dcc:	f000 f8c2 	bl	8000f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <MX_TIM2_Init+0x94>)
 8000dde:	f001 ff21 	bl	8002c24 <HAL_TIM_ConfigClockSource>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000de8:	f000 f8b4 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_TIM2_Init+0x94>)
 8000dfa:	f002 f90b 	bl	8003014 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e04:	f000 f8a6 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000180 	.word	0x20000180

08000e14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <MX_USART1_UART_Init+0x50>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e38:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e4c:	f002 f952 	bl	80030f4 <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e56:	f000 f87d 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200001c8 	.word	0x200001c8
 8000e64:	40013800 	.word	0x40013800

08000e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	@ (8000eb8 <MX_USART2_UART_Init+0x50>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	f002 f928 	bl	80030f4 <HAL_UART_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eaa:	f000 f853 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000210 	.word	0x20000210
 8000eb8:	40004400 	.word	0x40004400

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <MX_GPIO_Init+0x90>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f4c <MX_GPIO_Init+0x90>)
 8000ed6:	f043 0320 	orr.w	r3, r3, #32
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_GPIO_Init+0x90>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0320 	and.w	r3, r3, #32
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <MX_GPIO_Init+0x90>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a17      	ldr	r2, [pc, #92]	@ (8000f4c <MX_GPIO_Init+0x90>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <MX_GPIO_Init+0x90>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <MX_GPIO_Init+0x90>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a11      	ldr	r2, [pc, #68]	@ (8000f4c <MX_GPIO_Init+0x90>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <MX_GPIO_Init+0x90>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f240 4103 	movw	r1, #1027	@ 0x403
 8000f1e:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <MX_GPIO_Init+0x94>)
 8000f20:	f000 fe98 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8000f24:	f240 4303 	movw	r3, #1027	@ 0x403
 8000f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 0310 	add.w	r3, r7, #16
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <MX_GPIO_Init+0x94>)
 8000f3e:	f000 fd05 	bl	800194c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010c00 	.word	0x40010c00

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <Error_Handler+0x8>

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	4a14      	ldr	r2, [pc, #80]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6193      	str	r3, [r2, #24]
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <HAL_MspInit+0x5c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_MspInit+0x60>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <HAL_MspInit+0x60>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a15      	ldr	r2, [pc, #84]	@ (8001034 <HAL_SPI_MspInit+0x70>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d123      	bne.n	800102c <HAL_SPI_MspInit+0x68>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_SPI_MspInit+0x74>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a13      	ldr	r2, [pc, #76]	@ (8001038 <HAL_SPI_MspInit+0x74>)
 8000fea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <HAL_SPI_MspInit+0x74>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_SPI_MspInit+0x74>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <HAL_SPI_MspInit+0x74>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_SPI_MspInit+0x74>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001014:	23a0      	movs	r3, #160	@ 0xa0
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <HAL_SPI_MspInit+0x78>)
 8001028:	f000 fc90 	bl	800194c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40013000 	.word	0x40013000
 8001038:	40021000 	.word	0x40021000
 800103c:	40010800 	.word	0x40010800

08001040 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001050:	d113      	bne.n	800107a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <HAL_TIM_Base_MspInit+0x44>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a0b      	ldr	r2, [pc, #44]	@ (8001084 <HAL_TIM_Base_MspInit+0x44>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <HAL_TIM_Base_MspInit+0x44>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	201c      	movs	r0, #28
 8001070:	f000 fb83 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001074:	201c      	movs	r0, #28
 8001076:	f000 fb9c 	bl	80017b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a3f      	ldr	r2, [pc, #252]	@ (80011a0 <HAL_UART_MspInit+0x118>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d13a      	bne.n	800111e <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010a8:	4b3e      	ldr	r3, [pc, #248]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a3d      	ldr	r2, [pc, #244]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b3b      	ldr	r3, [pc, #236]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b38      	ldr	r3, [pc, #224]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a37      	ldr	r2, [pc, #220]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b35      	ldr	r3, [pc, #212]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0318 	add.w	r3, r7, #24
 80010ea:	4619      	mov	r1, r3
 80010ec:	482e      	ldr	r0, [pc, #184]	@ (80011a8 <HAL_UART_MspInit+0x120>)
 80010ee:	f000 fc2d 	bl	800194c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0318 	add.w	r3, r7, #24
 8001104:	4619      	mov	r1, r3
 8001106:	4828      	ldr	r0, [pc, #160]	@ (80011a8 <HAL_UART_MspInit+0x120>)
 8001108:	f000 fc20 	bl	800194c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2025      	movs	r0, #37	@ 0x25
 8001112:	f000 fb32 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001116:	2025      	movs	r0, #37	@ 0x25
 8001118:	f000 fb4b 	bl	80017b2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800111c:	e03c      	b.n	8001198 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a22      	ldr	r2, [pc, #136]	@ (80011ac <HAL_UART_MspInit+0x124>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d137      	bne.n	8001198 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001128:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	4a1d      	ldr	r2, [pc, #116]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 800112e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001132:	61d3      	str	r3, [r2, #28]
 8001134:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_UART_MspInit+0x11c>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001158:	2304      	movs	r3, #4
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	4619      	mov	r1, r3
 800116a:	480f      	ldr	r0, [pc, #60]	@ (80011a8 <HAL_UART_MspInit+0x120>)
 800116c:	f000 fbee 	bl	800194c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001170:	2308      	movs	r3, #8
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	4619      	mov	r1, r3
 8001182:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <HAL_UART_MspInit+0x120>)
 8001184:	f000 fbe2 	bl	800194c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2026      	movs	r0, #38	@ 0x26
 800118e:	f000 faf4 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001192:	2026      	movs	r0, #38	@ 0x26
 8001194:	f000 fb0d 	bl	80017b2 <HAL_NVIC_EnableIRQ>
}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	@ 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010800 	.word	0x40010800
 80011ac:	40004400 	.word	0x40004400

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <NMI_Handler+0x4>

080011b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <MemManage_Handler+0x4>

080011c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f9a4 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <TIM2_IRQHandler+0x10>)
 800120e:	f001 fc19 	bl	8002a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000180 	.word	0x20000180

0800121c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <USART1_IRQHandler+0x10>)
 8001222:	f001 ffdd 	bl	80031e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001c8 	.word	0x200001c8

08001230 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <USART2_IRQHandler+0x10>)
 8001236:	f001 ffd3 	bl	80031e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000210 	.word	0x20000210

08001244 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <udl_start_rx>:
static char queue_buf[UDL_QUEUE_SZ][UDL_LINE_BUFSZ];
static volatile uint8_t q_head = 0, q_tail = 0, q_count = 0;

// Internal: start listening for next byte
static void udl_start_rx(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    if(g_huart) {
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <udl_start_rx+0x20>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <udl_start_rx+0x1a>
        if(HAL_UART_Receive_IT(g_huart, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 800125c:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <udl_start_rx+0x20>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2201      	movs	r2, #1
 8001262:	4904      	ldr	r1, [pc, #16]	@ (8001274 <udl_start_rx+0x24>)
 8001264:	4618      	mov	r0, r3
 8001266:	f001 ff95 	bl	8003194 <HAL_UART_Receive_IT>
            // try again later (caller/ISR will re-trigger)
        }
    }
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000258 	.word	0x20000258
 8001274:	20000260 	.word	0x20000260

08001278 <UARTDisplay_Init>:
// khởi động  uart  lắng nghe byte tiếp theo và reset bộ đệm  hiện tại
void UARTDisplay_Init(UART_HandleTypeDef *huart)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    g_huart = huart;
 8001280:	4a0c      	ldr	r2, [pc, #48]	@ (80012b4 <UARTDisplay_Init+0x3c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
    line_pos = 0;
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <UARTDisplay_Init+0x40>)
 8001288:	2200      	movs	r2, #0
 800128a:	801a      	strh	r2, [r3, #0]
    q_head = q_tail = q_count = 0;
 800128c:	2200      	movs	r2, #0
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <UARTDisplay_Init+0x44>)
 8001290:	4611      	mov	r1, r2
 8001292:	7019      	strb	r1, [r3, #0]
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <UARTDisplay_Init+0x48>)
 8001296:	4611      	mov	r1, r2
 8001298:	7019      	strb	r1, [r3, #0]
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <UARTDisplay_Init+0x4c>)
 800129c:	701a      	strb	r2, [r3, #0]
    memset(line_buf, 0, sizeof(line_buf)); // clear current line buffer- làm sạch lại bộ đệm  hiện tại
 800129e:	2280      	movs	r2, #128	@ 0x80
 80012a0:	2100      	movs	r1, #0
 80012a2:	4809      	ldr	r0, [pc, #36]	@ (80012c8 <UARTDisplay_Init+0x50>)
 80012a4:	f002 fcae 	bl	8003c04 <memset>
    udl_start_rx();// khởi động lại rx
 80012a8:	f7ff ffd2 	bl	8001250 <udl_start_rx>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000258 	.word	0x20000258
 80012b8:	200002e4 	.word	0x200002e4
 80012bc:	200006ea 	.word	0x200006ea
 80012c0:	200006e9 	.word	0x200006e9
 80012c4:	200006e8 	.word	0x200006e8
 80012c8:	20000264 	.word	0x20000264

080012cc <UARTDisplay_SetLineCallback>:

void UARTDisplay_SetLineCallback(void (*cb)(const char *line))
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    g_line_cb = cb;
 80012d4:	4a03      	ldr	r2, [pc, #12]	@ (80012e4 <UARTDisplay_SetLineCallback+0x18>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	2000025c 	.word	0x2000025c

080012e8 <UARTDisplay_Process>:


void UARTDisplay_Process(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
    while(q_count) {
 80012ee:	e027      	b.n	8001340 <UARTDisplay_Process+0x58>
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
        __disable_irq();
        char *ln = queue_buf[q_head];
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <UARTDisplay_Process+0x6c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	01db      	lsls	r3, r3, #7
 80012fc:	4a16      	ldr	r2, [pc, #88]	@ (8001358 <UARTDisplay_Process+0x70>)
 80012fe:	4413      	add	r3, r2
 8001300:	607b      	str	r3, [r7, #4]
        q_head = (q_head + 1) % UDL_QUEUE_SZ;
 8001302:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <UARTDisplay_Process+0x6c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	3301      	adds	r3, #1
 800130a:	425a      	negs	r2, r3
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	f002 0207 	and.w	r2, r2, #7
 8001314:	bf58      	it	pl
 8001316:	4253      	negpl	r3, r2
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <UARTDisplay_Process+0x6c>)
 800131c:	701a      	strb	r2, [r3, #0]
        q_count--;
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <UARTDisplay_Process+0x74>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	3b01      	subs	r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <UARTDisplay_Process+0x74>)
 800132a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800132c:	b662      	cpsie	i
}
 800132e:	bf00      	nop
        __enable_irq();
        if(g_line_cb) g_line_cb(ln);
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <UARTDisplay_Process+0x78>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <UARTDisplay_Process+0x58>
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <UARTDisplay_Process+0x78>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	4798      	blx	r3
    while(q_count) {
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <UARTDisplay_Process+0x74>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1d2      	bne.n	80012f0 <UARTDisplay_Process+0x8>
        // clear slot after callback 
    }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200006e8 	.word	0x200006e8
 8001358:	200002e8 	.word	0x200002e8
 800135c:	200006ea 	.word	0x200006ea
 8001360:	2000025c 	.word	0x2000025c

08001364 <UARTDisplay_PushLine>:

// Push a line into queue (caller must ensure it's a C string)
int UARTDisplay_PushLine(const char *line)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
    __disable_irq();
    if(q_count >= UDL_QUEUE_SZ) { __enable_irq(); return -1; }
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <UARTDisplay_PushLine+0x80>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b07      	cmp	r3, #7
 8001378:	d904      	bls.n	8001384 <UARTDisplay_PushLine+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
 800137a:	b662      	cpsie	i
}
 800137c:	bf00      	nop
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e02b      	b.n	80013dc <UARTDisplay_PushLine+0x78>
    strncpy(queue_buf[q_tail], line, UDL_LINE_BUFSZ-1);
 8001384:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <UARTDisplay_PushLine+0x84>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	01db      	lsls	r3, r3, #7
 800138c:	4a17      	ldr	r2, [pc, #92]	@ (80013ec <UARTDisplay_PushLine+0x88>)
 800138e:	4413      	add	r3, r2
 8001390:	227f      	movs	r2, #127	@ 0x7f
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	f002 fc3d 	bl	8003c14 <strncpy>
    queue_buf[q_tail][UDL_LINE_BUFSZ-1] = '\0';
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <UARTDisplay_PushLine+0x84>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <UARTDisplay_PushLine+0x88>)
 80013a2:	01db      	lsls	r3, r3, #7
 80013a4:	4413      	add	r3, r2
 80013a6:	337f      	adds	r3, #127	@ 0x7f
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
    q_tail = (q_tail + 1) % UDL_QUEUE_SZ;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <UARTDisplay_PushLine+0x84>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	425a      	negs	r2, r3
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	f002 0207 	and.w	r2, r2, #7
 80013be:	bf58      	it	pl
 80013c0:	4253      	negpl	r3, r2
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <UARTDisplay_PushLine+0x84>)
 80013c6:	701a      	strb	r2, [r3, #0]
    q_count++;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <UARTDisplay_PushLine+0x80>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	3301      	adds	r3, #1
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <UARTDisplay_PushLine+0x80>)
 80013d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013d6:	b662      	cpsie	i
}
 80013d8:	bf00      	nop
    __enable_irq();
    return 0;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200006ea 	.word	0x200006ea
 80013e8:	200006e9 	.word	0x200006e9
 80013ec:	200002e8 	.word	0x200002e8

080013f0 <UARTDisplay_RxCplt>:

// This function should be called by the application's HAL_UART_RxCpltCallback
// when the configured huart triggers a RX complete (1 byte). We keep it public
// to make wiring explicit.
void UARTDisplay_RxCplt(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
    char ch = (char)rx_byte;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <UARTDisplay_RxCplt+0x78>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  
    if(ch == '\r' || ch == '\n' || ch == ';') {
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b0d      	cmp	r3, #13
 8001400:	d005      	beq.n	800140e <UARTDisplay_RxCplt+0x1e>
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b0a      	cmp	r3, #10
 8001406:	d002      	beq.n	800140e <UARTDisplay_RxCplt+0x1e>
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b3b      	cmp	r3, #59	@ 0x3b
 800140c:	d115      	bne.n	800143a <UARTDisplay_RxCplt+0x4a>
        if(line_pos > 0) {
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <UARTDisplay_RxCplt+0x7c>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <UARTDisplay_RxCplt+0x6a>
            // terminate and enqueue
            line_buf[line_pos] = '\0';
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <UARTDisplay_RxCplt+0x7c>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <UARTDisplay_RxCplt+0x80>)
 8001422:	2100      	movs	r1, #0
 8001424:	5499      	strb	r1, [r3, r2]
            UARTDisplay_PushLine(line_buf);
 8001426:	4812      	ldr	r0, [pc, #72]	@ (8001470 <UARTDisplay_RxCplt+0x80>)
 8001428:	f7ff ff9c 	bl	8001364 <UARTDisplay_PushLine>
            line_pos = 0;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <UARTDisplay_RxCplt+0x7c>)
 800142e:	2200      	movs	r2, #0
 8001430:	801a      	strh	r2, [r3, #0]
            line_buf[0] = '\0';
 8001432:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <UARTDisplay_RxCplt+0x80>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
        if(line_pos > 0) {
 8001438:	e00f      	b.n	800145a <UARTDisplay_RxCplt+0x6a>
        }
    } else {
        if(line_pos < (UDL_LINE_BUFSZ - 1)) {
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <UARTDisplay_RxCplt+0x7c>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	2b7e      	cmp	r3, #126	@ 0x7e
 8001442:	d80a      	bhi.n	800145a <UARTDisplay_RxCplt+0x6a>
            line_buf[line_pos++] = ch;
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <UARTDisplay_RxCplt+0x7c>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	b291      	uxth	r1, r2
 800144e:	4a07      	ldr	r2, [pc, #28]	@ (800146c <UARTDisplay_RxCplt+0x7c>)
 8001450:	8011      	strh	r1, [r2, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <UARTDisplay_RxCplt+0x80>)
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	5453      	strb	r3, [r2, r1]
        }
       
    }
    // restart reception
    udl_start_rx();
 800145a:	f7ff fef9 	bl	8001250 <udl_start_rx>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000260 	.word	0x20000260
 800146c:	200002e4 	.word	0x200002e4
 8001470:	20000264 	.word	0x20000264

08001474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001474:	f7ff fee6 	bl	8001244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480b      	ldr	r0, [pc, #44]	@ (80014a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800147a:	490c      	ldr	r1, [pc, #48]	@ (80014ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800147c:	4a0c      	ldr	r2, [pc, #48]	@ (80014b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a09      	ldr	r2, [pc, #36]	@ (80014b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001490:	4c09      	ldr	r4, [pc, #36]	@ (80014b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149e:	f002 fbcd 	bl	8003c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a2:	f7ff fbbb 	bl	8000c1c <main>
  bx lr
 80014a6:	4770      	bx	lr
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014b0:	080044dc 	.word	0x080044dc
  ldr r2, =_sbss
 80014b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014b8:	200006f0 	.word	0x200006f0

080014bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_2_IRQHandler>
	...

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <HAL_Init+0x28>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a07      	ldr	r2, [pc, #28]	@ (80014e8 <HAL_Init+0x28>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 f947 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	200f      	movs	r0, #15
 80014d8:	f000 f808 	bl	80014ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014dc:	f7ff fd40 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_InitTick+0x54>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <HAL_InitTick+0x58>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f95f 	bl	80017ce <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f000 f927 	bl	800177a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	@ (8001548 <HAL_InitTick+0x5c>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	20000008 	.word	0x20000008
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <HAL_IncTick+0x1c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <HAL_IncTick+0x20>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a03      	ldr	r2, [pc, #12]	@ (800156c <HAL_IncTick+0x20>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	20000008 	.word	0x20000008
 800156c:	200006ec 	.word	0x200006ec

08001570 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b02      	ldr	r3, [pc, #8]	@ (8001580 <HAL_GetTick+0x10>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	200006ec 	.word	0x200006ec

08001584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800158c:	f7ff fff0 	bl	8001570 <HAL_GetTick>
 8001590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d005      	beq.n	80015aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159e:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <HAL_Delay+0x44>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015aa:	bf00      	nop
 80015ac:	f7ff ffe0 	bl	8001570 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d8f7      	bhi.n	80015ac <HAL_Delay+0x28>
  {
  }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000008 	.word	0x20000008

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4906      	ldr	r1, [pc, #24]	@ (8001664 <__NVIC_EnableIRQ+0x34>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	@ 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff ff90 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff2d 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff42 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff90 	bl	80016bc <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5f 	bl	8001668 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff35 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa2 	bl	8001720 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d008      	beq.n	8001810 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2204      	movs	r2, #4
 8001802:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e020      	b.n	8001852 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 020e 	bic.w	r2, r2, #14
 800181e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f202 	lsl.w	r2, r1, r2
 800183e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d005      	beq.n	8001880 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2204      	movs	r2, #4
 8001878:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e051      	b.n	8001924 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 020e 	bic.w	r2, r2, #14
 800188e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0201 	bic.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a22      	ldr	r2, [pc, #136]	@ (8001930 <HAL_DMA_Abort_IT+0xd4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d029      	beq.n	80018fe <HAL_DMA_Abort_IT+0xa2>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a21      	ldr	r2, [pc, #132]	@ (8001934 <HAL_DMA_Abort_IT+0xd8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d022      	beq.n	80018fa <HAL_DMA_Abort_IT+0x9e>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001938 <HAL_DMA_Abort_IT+0xdc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01a      	beq.n	80018f4 <HAL_DMA_Abort_IT+0x98>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a1e      	ldr	r2, [pc, #120]	@ (800193c <HAL_DMA_Abort_IT+0xe0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d012      	beq.n	80018ee <HAL_DMA_Abort_IT+0x92>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001940 <HAL_DMA_Abort_IT+0xe4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00a      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x8c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001944 <HAL_DMA_Abort_IT+0xe8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d102      	bne.n	80018e2 <HAL_DMA_Abort_IT+0x86>
 80018dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018e0:	e00e      	b.n	8001900 <HAL_DMA_Abort_IT+0xa4>
 80018e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018e6:	e00b      	b.n	8001900 <HAL_DMA_Abort_IT+0xa4>
 80018e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018ec:	e008      	b.n	8001900 <HAL_DMA_Abort_IT+0xa4>
 80018ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f2:	e005      	b.n	8001900 <HAL_DMA_Abort_IT+0xa4>
 80018f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f8:	e002      	b.n	8001900 <HAL_DMA_Abort_IT+0xa4>
 80018fa:	2310      	movs	r3, #16
 80018fc:	e000      	b.n	8001900 <HAL_DMA_Abort_IT+0xa4>
 80018fe:	2301      	movs	r3, #1
 8001900:	4a11      	ldr	r2, [pc, #68]	@ (8001948 <HAL_DMA_Abort_IT+0xec>)
 8001902:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4798      	blx	r3
    } 
  }
  return status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40020008 	.word	0x40020008
 8001934:	4002001c 	.word	0x4002001c
 8001938:	40020030 	.word	0x40020030
 800193c:	40020044 	.word	0x40020044
 8001940:	40020058 	.word	0x40020058
 8001944:	4002006c 	.word	0x4002006c
 8001948:	40020000 	.word	0x40020000

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b08b      	sub	sp, #44	@ 0x2c
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195e:	e169      	b.n	8001c34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001960:	2201      	movs	r2, #1
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	429a      	cmp	r2, r3
 800197a:	f040 8158 	bne.w	8001c2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a9a      	ldr	r2, [pc, #616]	@ (8001bec <HAL_GPIO_Init+0x2a0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d05e      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 8001988:	4a98      	ldr	r2, [pc, #608]	@ (8001bec <HAL_GPIO_Init+0x2a0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d875      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 800198e:	4a98      	ldr	r2, [pc, #608]	@ (8001bf0 <HAL_GPIO_Init+0x2a4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d058      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 8001994:	4a96      	ldr	r2, [pc, #600]	@ (8001bf0 <HAL_GPIO_Init+0x2a4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d86f      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 800199a:	4a96      	ldr	r2, [pc, #600]	@ (8001bf4 <HAL_GPIO_Init+0x2a8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d052      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 80019a0:	4a94      	ldr	r2, [pc, #592]	@ (8001bf4 <HAL_GPIO_Init+0x2a8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d869      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019a6:	4a94      	ldr	r2, [pc, #592]	@ (8001bf8 <HAL_GPIO_Init+0x2ac>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d04c      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 80019ac:	4a92      	ldr	r2, [pc, #584]	@ (8001bf8 <HAL_GPIO_Init+0x2ac>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d863      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019b2:	4a92      	ldr	r2, [pc, #584]	@ (8001bfc <HAL_GPIO_Init+0x2b0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d046      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 80019b8:	4a90      	ldr	r2, [pc, #576]	@ (8001bfc <HAL_GPIO_Init+0x2b0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d85d      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d82a      	bhi.n	8001a18 <HAL_GPIO_Init+0xcc>
 80019c2:	2b12      	cmp	r3, #18
 80019c4:	d859      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019c6:	a201      	add	r2, pc, #4	@ (adr r2, 80019cc <HAL_GPIO_Init+0x80>)
 80019c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019cc:	08001a47 	.word	0x08001a47
 80019d0:	08001a21 	.word	0x08001a21
 80019d4:	08001a33 	.word	0x08001a33
 80019d8:	08001a75 	.word	0x08001a75
 80019dc:	08001a7b 	.word	0x08001a7b
 80019e0:	08001a7b 	.word	0x08001a7b
 80019e4:	08001a7b 	.word	0x08001a7b
 80019e8:	08001a7b 	.word	0x08001a7b
 80019ec:	08001a7b 	.word	0x08001a7b
 80019f0:	08001a7b 	.word	0x08001a7b
 80019f4:	08001a7b 	.word	0x08001a7b
 80019f8:	08001a7b 	.word	0x08001a7b
 80019fc:	08001a7b 	.word	0x08001a7b
 8001a00:	08001a7b 	.word	0x08001a7b
 8001a04:	08001a7b 	.word	0x08001a7b
 8001a08:	08001a7b 	.word	0x08001a7b
 8001a0c:	08001a7b 	.word	0x08001a7b
 8001a10:	08001a29 	.word	0x08001a29
 8001a14:	08001a3d 	.word	0x08001a3d
 8001a18:	4a79      	ldr	r2, [pc, #484]	@ (8001c00 <HAL_GPIO_Init+0x2b4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a1e:	e02c      	b.n	8001a7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	623b      	str	r3, [r7, #32]
          break;
 8001a26:	e029      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	623b      	str	r3, [r7, #32]
          break;
 8001a30:	e024      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	3308      	adds	r3, #8
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e01f      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	330c      	adds	r3, #12
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	e01a      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e013      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d105      	bne.n	8001a68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	611a      	str	r2, [r3, #16]
          break;
 8001a66:	e009      	b.n	8001a7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a68:	2308      	movs	r3, #8
 8001a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	615a      	str	r2, [r3, #20]
          break;
 8001a72:	e003      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          break;
 8001a7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2bff      	cmp	r3, #255	@ 0xff
 8001a80:	d801      	bhi.n	8001a86 <HAL_GPIO_Init+0x13a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	e001      	b.n	8001a8a <HAL_GPIO_Init+0x13e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2bff      	cmp	r3, #255	@ 0xff
 8001a90:	d802      	bhi.n	8001a98 <HAL_GPIO_Init+0x14c>
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x152>
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	3b08      	subs	r3, #8
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	401a      	ands	r2, r3
 8001ab0:	6a39      	ldr	r1, [r7, #32]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80b1 	beq.w	8001c2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001acc:	4b4d      	ldr	r3, [pc, #308]	@ (8001c04 <HAL_GPIO_Init+0x2b8>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a4c      	ldr	r2, [pc, #304]	@ (8001c04 <HAL_GPIO_Init+0x2b8>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8001c04 <HAL_GPIO_Init+0x2b8>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae4:	4a48      	ldr	r2, [pc, #288]	@ (8001c08 <HAL_GPIO_Init+0x2bc>)
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a40      	ldr	r2, [pc, #256]	@ (8001c0c <HAL_GPIO_Init+0x2c0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d013      	beq.n	8001b38 <HAL_GPIO_Init+0x1ec>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a3f      	ldr	r2, [pc, #252]	@ (8001c10 <HAL_GPIO_Init+0x2c4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00d      	beq.n	8001b34 <HAL_GPIO_Init+0x1e8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d007      	beq.n	8001b30 <HAL_GPIO_Init+0x1e4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a3d      	ldr	r2, [pc, #244]	@ (8001c18 <HAL_GPIO_Init+0x2cc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_GPIO_Init+0x1e0>
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e006      	b.n	8001b3a <HAL_GPIO_Init+0x1ee>
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	e004      	b.n	8001b3a <HAL_GPIO_Init+0x1ee>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e002      	b.n	8001b3a <HAL_GPIO_Init+0x1ee>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_GPIO_Init+0x1ee>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b3c:	f002 0203 	and.w	r2, r2, #3
 8001b40:	0092      	lsls	r2, r2, #2
 8001b42:	4093      	lsls	r3, r2
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b4a:	492f      	ldr	r1, [pc, #188]	@ (8001c08 <HAL_GPIO_Init+0x2bc>)
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b64:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	492c      	ldr	r1, [pc, #176]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b72:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4928      	ldr	r1, [pc, #160]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b8c:	4b23      	ldr	r3, [pc, #140]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	4922      	ldr	r1, [pc, #136]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	491e      	ldr	r1, [pc, #120]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb4:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4918      	ldr	r1, [pc, #96]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bc2:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4914      	ldr	r1, [pc, #80]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d021      	beq.n	8001c20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	490e      	ldr	r1, [pc, #56]	@ (8001c1c <HAL_GPIO_Init+0x2d0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
 8001be8:	e021      	b.n	8001c2e <HAL_GPIO_Init+0x2e2>
 8001bea:	bf00      	nop
 8001bec:	10320000 	.word	0x10320000
 8001bf0:	10310000 	.word	0x10310000
 8001bf4:	10220000 	.word	0x10220000
 8001bf8:	10210000 	.word	0x10210000
 8001bfc:	10120000 	.word	0x10120000
 8001c00:	10110000 	.word	0x10110000
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40010800 	.word	0x40010800
 8001c10:	40010c00 	.word	0x40010c00
 8001c14:	40011000 	.word	0x40011000
 8001c18:	40011400 	.word	0x40011400
 8001c1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <HAL_GPIO_Init+0x304>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	4909      	ldr	r1, [pc, #36]	@ (8001c50 <HAL_GPIO_Init+0x304>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	3301      	adds	r3, #1
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f47f ae8e 	bne.w	8001960 <HAL_GPIO_Init+0x14>
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	372c      	adds	r7, #44	@ 0x2c
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c70:	e003      	b.n	8001c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	611a      	str	r2, [r3, #16]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e272      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8087 	beq.w	8001db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca4:	4b92      	ldr	r3, [pc, #584]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d00c      	beq.n	8001cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb0:	4b8f      	ldr	r3, [pc, #572]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d112      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
 8001cbc:	4b8c      	ldr	r3, [pc, #560]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cca:	4b89      	ldr	r3, [pc, #548]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d06c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x12c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d168      	bne.n	8001db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e24c      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x76>
 8001cec:	4b80      	ldr	r3, [pc, #512]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a7f      	ldr	r2, [pc, #508]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e02e      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b7b      	ldr	r3, [pc, #492]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a7a      	ldr	r2, [pc, #488]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b78      	ldr	r3, [pc, #480]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a77      	ldr	r2, [pc, #476]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e01d      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0xbc>
 8001d26:	4b72      	ldr	r3, [pc, #456]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a71      	ldr	r2, [pc, #452]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e00b      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d40:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a6a      	ldr	r2, [pc, #424]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b68      	ldr	r3, [pc, #416]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a67      	ldr	r2, [pc, #412]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fc06 	bl	8001570 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7ff fc02 	bl	8001570 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	@ 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e200      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0xe4>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fbf2 	bl	8001570 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fbee 	bl	8001570 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	@ 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e1ec      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	4b53      	ldr	r3, [pc, #332]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x10c>
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d063      	beq.n	8001e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dca:	4b49      	ldr	r3, [pc, #292]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d11c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x18c>
 8001dd6:	4b46      	ldr	r3, [pc, #280]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d116      	bne.n	8001e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	4b43      	ldr	r3, [pc, #268]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_RCC_OscConfig+0x176>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e1c0      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4939      	ldr	r1, [pc, #228]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	e03a      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d020      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e18:	4b36      	ldr	r3, [pc, #216]	@ (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fba7 	bl	8001570 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e26:	f7ff fba3 	bl	8001570 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e1a1      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4927      	ldr	r1, [pc, #156]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
 8001e58:	e015      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fb86 	bl	8001570 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e68:	f7ff fb82 	bl	8001570 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e180      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d03a      	beq.n	8001f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d019      	beq.n	8001ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff fb66 	bl	8001570 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fb62 	bl	8001570 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e160      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f000 face 	bl	8002468 <RCC_Delay>
 8001ecc:	e01c      	b.n	8001f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff fb4c 	bl	8001570 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eda:	e00f      	b.n	8001efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001edc:	f7ff fb48 	bl	8001570 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d908      	bls.n	8001efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e146      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	42420000 	.word	0x42420000
 8001ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	4b92      	ldr	r3, [pc, #584]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e9      	bne.n	8001edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80a6 	beq.w	8002062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10d      	bne.n	8001f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b88      	ldr	r3, [pc, #544]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a87      	ldr	r2, [pc, #540]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b85      	ldr	r3, [pc, #532]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b82      	ldr	r3, [pc, #520]	@ (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d118      	bne.n	8001f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7e      	ldr	r2, [pc, #504]	@ (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fb09 	bl	8001570 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f62:	f7ff fb05 	bl	8001570 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b64      	cmp	r3, #100	@ 0x64
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e103      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b75      	ldr	r3, [pc, #468]	@ (800214c <HAL_RCC_OscConfig+0x4c8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x312>
 8001f88:	4b6f      	ldr	r3, [pc, #444]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e02d      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x334>
 8001f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a69      	ldr	r2, [pc, #420]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4b67      	ldr	r3, [pc, #412]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a66      	ldr	r2, [pc, #408]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6213      	str	r3, [r2, #32]
 8001fb6:	e01c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_OscConfig+0x356>
 8001fc0:	4b61      	ldr	r3, [pc, #388]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a60      	ldr	r2, [pc, #384]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	4b5e      	ldr	r3, [pc, #376]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e00b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001fda:	4b5b      	ldr	r3, [pc, #364]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a5a      	ldr	r2, [pc, #360]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4b58      	ldr	r3, [pc, #352]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a57      	ldr	r2, [pc, #348]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d015      	beq.n	8002026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff fab9 	bl	8001570 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7ff fab5 	bl	8001570 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0b1      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	4b4b      	ldr	r3, [pc, #300]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ee      	beq.n	8002002 <HAL_RCC_OscConfig+0x37e>
 8002024:	e014      	b.n	8002050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff faa3 	bl	8001570 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7ff fa9f 	bl	8001570 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e09b      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	4b40      	ldr	r3, [pc, #256]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ee      	bne.n	800202e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4b3c      	ldr	r3, [pc, #240]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a3b      	ldr	r2, [pc, #236]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8087 	beq.w	800217a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206c:	4b36      	ldr	r3, [pc, #216]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d061      	beq.n	800213c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d146      	bne.n	800210e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002080:	4b33      	ldr	r3, [pc, #204]	@ (8002150 <HAL_RCC_OscConfig+0x4cc>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7ff fa73 	bl	8001570 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208e:	f7ff fa6f 	bl	8001570 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e06d      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a0:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b4:	d108      	bne.n	80020c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b6:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4921      	ldr	r1, [pc, #132]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a19      	ldr	r1, [r3, #32]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	430b      	orrs	r3, r1
 80020da:	491b      	ldr	r1, [pc, #108]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fa43 	bl	8001570 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff fa3f 	bl	8001570 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e03d      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002100:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x46a>
 800210c:	e035      	b.n	800217a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_RCC_OscConfig+0x4cc>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fa2c 	bl	8001570 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff fa28 	bl	8001570 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e026      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x498>
 800213a:	e01e      	b.n	800217a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d107      	bne.n	8002154 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e019      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
 8002150:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_RCC_OscConfig+0x500>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	429a      	cmp	r2, r3
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000

08002188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0d0      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b6a      	ldr	r3, [pc, #424]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d910      	bls.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b67      	ldr	r3, [pc, #412]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 0207 	bic.w	r2, r3, #7
 80021b2:	4965      	ldr	r1, [pc, #404]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b63      	ldr	r3, [pc, #396]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0b8      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e4:	4b59      	ldr	r3, [pc, #356]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a58      	ldr	r2, [pc, #352]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021fc:	4b53      	ldr	r3, [pc, #332]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a52      	ldr	r2, [pc, #328]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002206:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002208:	4b50      	ldr	r3, [pc, #320]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	494d      	ldr	r1, [pc, #308]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d040      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	4b47      	ldr	r3, [pc, #284]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d115      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e07f      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	4b41      	ldr	r3, [pc, #260]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e073      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002256:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e06b      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b39      	ldr	r3, [pc, #228]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4936      	ldr	r1, [pc, #216]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002278:	f7ff f97a 	bl	8001570 <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7ff f976 	bl	8001570 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e053      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a8:	4b27      	ldr	r3, [pc, #156]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d210      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b24      	ldr	r3, [pc, #144]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 0207 	bic.w	r2, r3, #7
 80022be:	4922      	ldr	r1, [pc, #136]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b20      	ldr	r3, [pc, #128]	@ (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e032      	b.n	800233e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b19      	ldr	r3, [pc, #100]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4916      	ldr	r1, [pc, #88]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002302:	4b12      	ldr	r3, [pc, #72]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	490e      	ldr	r1, [pc, #56]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002316:	f000 f821 	bl	800235c <HAL_RCC_GetSysClockFreq>
 800231a:	4602      	mov	r2, r0
 800231c:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	490a      	ldr	r1, [pc, #40]	@ (8002350 <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	5ccb      	ldrb	r3, [r1, r3]
 800232a:	fa22 f303 	lsr.w	r3, r2, r3
 800232e:	4a09      	ldr	r2, [pc, #36]	@ (8002354 <HAL_RCC_ClockConfig+0x1cc>)
 8002330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_RCC_ClockConfig+0x1d0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f8d8 	bl	80014ec <HAL_InitTick>

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40022000 	.word	0x40022000
 800234c:	40021000 	.word	0x40021000
 8002350:	080044a0 	.word	0x080044a0
 8002354:	20000000 	.word	0x20000000
 8002358:	20000004 	.word	0x20000004

0800235c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002376:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b04      	cmp	r3, #4
 8002384:	d002      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x30>
 8002386:	2b08      	cmp	r3, #8
 8002388:	d003      	beq.n	8002392 <HAL_RCC_GetSysClockFreq+0x36>
 800238a:	e027      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800238c:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800238e:	613b      	str	r3, [r7, #16]
      break;
 8002390:	e027      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	0c9b      	lsrs	r3, r3, #18
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	4a17      	ldr	r2, [pc, #92]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0c5b      	lsrs	r3, r3, #17
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	4a11      	ldr	r2, [pc, #68]	@ (80023fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a0d      	ldr	r2, [pc, #52]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023be:	fb03 f202 	mul.w	r2, r3, r2
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e004      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002400 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	613b      	str	r3, [r7, #16]
      break;
 80023da:	e002      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023dc:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023de:	613b      	str	r3, [r7, #16]
      break;
 80023e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e2:	693b      	ldr	r3, [r7, #16]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	007a1200 	.word	0x007a1200
 80023f8:	080044b8 	.word	0x080044b8
 80023fc:	080044c8 	.word	0x080044c8
 8002400:	003d0900 	.word	0x003d0900

08002404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002408:	4b02      	ldr	r3, [pc, #8]	@ (8002414 <HAL_RCC_GetHCLKFreq+0x10>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	20000000 	.word	0x20000000

08002418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800241c:	f7ff fff2 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4903      	ldr	r1, [pc, #12]	@ (800243c <HAL_RCC_GetPCLK1Freq+0x24>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	080044b0 	.word	0x080044b0

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002444:	f7ff ffde 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0adb      	lsrs	r3, r3, #11
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4903      	ldr	r1, [pc, #12]	@ (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	080044b0 	.word	0x080044b0

08002468 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002470:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <RCC_Delay+0x34>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <RCC_Delay+0x38>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	0a5b      	lsrs	r3, r3, #9
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002484:	bf00      	nop
  }
  while (Delay --);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1e5a      	subs	r2, r3, #1
 800248a:	60fa      	str	r2, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f9      	bne.n	8002484 <RCC_Delay+0x1c>
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	20000000 	.word	0x20000000
 80024a0:	10624dd3 	.word	0x10624dd3

080024a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e076      	b.n	80025a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d108      	bne.n	80024d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024c6:	d009      	beq.n	80024dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
 80024ce:	e005      	b.n	80024dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe fd64 	bl	8000fc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002512:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002560:	ea42 0103 	orr.w	r1, r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	0c1a      	lsrs	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f002 0204 	and.w	r2, r2, #4
 8002582:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002592:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025bc:	f7fe ffd8 	bl	8001570 <HAL_GetTick>
 80025c0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
 80025d4:	e12a      	b.n	800282c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_SPI_Transmit+0x36>
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e122      	b.n	800282c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_SPI_Transmit+0x48>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e11b      	b.n	800282c <HAL_SPI_Transmit+0x280>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2203      	movs	r2, #3
 8002600:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	88fa      	ldrh	r2, [r7, #6]
 8002614:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	88fa      	ldrh	r2, [r7, #6]
 800261a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002642:	d10f      	bne.n	8002664 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002652:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002662:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266e:	2b40      	cmp	r3, #64	@ 0x40
 8002670:	d007      	beq.n	8002682 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800268a:	d152      	bne.n	8002732 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_SPI_Transmit+0xee>
 8002694:	8b7b      	ldrh	r3, [r7, #26]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d145      	bne.n	8002726 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	1c9a      	adds	r2, r3, #2
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026be:	e032      	b.n	8002726 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d112      	bne.n	80026f4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	881a      	ldrh	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	1c9a      	adds	r2, r3, #2
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80026f2:	e018      	b.n	8002726 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f4:	f7fe ff3c 	bl	8001570 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d803      	bhi.n	800270c <HAL_SPI_Transmit+0x160>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d102      	bne.n	8002712 <HAL_SPI_Transmit+0x166>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e082      	b.n	800282c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1c7      	bne.n	80026c0 <HAL_SPI_Transmit+0x114>
 8002730:	e053      	b.n	80027da <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_SPI_Transmit+0x194>
 800273a:	8b7b      	ldrh	r3, [r7, #26]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d147      	bne.n	80027d0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002766:	e033      	b.n	80027d0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d113      	bne.n	800279e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	330c      	adds	r3, #12
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002792:	b29b      	uxth	r3, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800279c:	e018      	b.n	80027d0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800279e:	f7fe fee7 	bl	8001570 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d803      	bhi.n	80027b6 <HAL_SPI_Transmit+0x20a>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b4:	d102      	bne.n	80027bc <HAL_SPI_Transmit+0x210>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e02d      	b.n	800282c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1c6      	bne.n	8002768 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	6839      	ldr	r1, [r7, #0]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f8b0 	bl	8002944 <SPI_EndRxTxTransaction>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800282a:	2300      	movs	r3, #0
  }
}
 800282c:	4618      	mov	r0, r3
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002844:	f7fe fe94 	bl	8001570 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	4413      	add	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002854:	f7fe fe8c 	bl	8001570 <HAL_GetTick>
 8002858:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800285a:	4b39      	ldr	r3, [pc, #228]	@ (8002940 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	015b      	lsls	r3, r3, #5
 8002860:	0d1b      	lsrs	r3, r3, #20
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800286a:	e054      	b.n	8002916 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002872:	d050      	beq.n	8002916 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002874:	f7fe fe7c 	bl	8001570 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	429a      	cmp	r2, r3
 8002882:	d902      	bls.n	800288a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d13d      	bne.n	8002906 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002898:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028a2:	d111      	bne.n	80028c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ac:	d004      	beq.n	80028b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b6:	d107      	bne.n	80028c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028d0:	d10f      	bne.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e017      	b.n	8002936 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3b01      	subs	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4013      	ands	r3, r2
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	bf0c      	ite	eq
 8002926:	2301      	moveq	r3, #1
 8002928:	2300      	movne	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	429a      	cmp	r2, r3
 8002932:	d19b      	bne.n	800286c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000000 	.word	0x20000000

08002944 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2201      	movs	r2, #1
 8002958:	2102      	movs	r1, #2
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f7ff ff6a 	bl	8002834 <SPI_WaitFlagStateUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e013      	b.n	800299e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2200      	movs	r2, #0
 800297e:	2180      	movs	r1, #128	@ 0x80
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff ff57 	bl	8002834 <SPI_WaitFlagStateUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e000      	b.n	800299e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e041      	b.n	8002a3c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fe fb37 	bl	8001040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f000 fa11 	bl	8002e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d020      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01b      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0202 	mvn.w	r2, #2
 8002a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f9a1 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f994 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f9a3 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d020      	beq.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01b      	beq.n	8002af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0204 	mvn.w	r2, #4
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f97b 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f96e 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f97d 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d020      	beq.n	8002b40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01b      	beq.n	8002b40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0208 	mvn.w	r2, #8
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2204      	movs	r2, #4
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f955 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f948 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f957 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d020      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01b      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0210 	mvn.w	r2, #16
 8002b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2208      	movs	r2, #8
 8002b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f92f 	bl	8002dd6 <HAL_TIM_IC_CaptureCallback>
 8002b78:	e005      	b.n	8002b86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f922 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f931 	bl	8002de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0201 	mvn.w	r2, #1
 8002ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f901 	bl	8002db2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00c      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fa87 	bl	80030e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f901 	bl	8002dfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0220 	mvn.w	r2, #32
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fa5a 	bl	80030d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_TIM_ConfigClockSource+0x1c>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e0b4      	b.n	8002daa <HAL_TIM_ConfigClockSource+0x186>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c78:	d03e      	beq.n	8002cf8 <HAL_TIM_ConfigClockSource+0xd4>
 8002c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c7e:	f200 8087 	bhi.w	8002d90 <HAL_TIM_ConfigClockSource+0x16c>
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c86:	f000 8086 	beq.w	8002d96 <HAL_TIM_ConfigClockSource+0x172>
 8002c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c8e:	d87f      	bhi.n	8002d90 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b70      	cmp	r3, #112	@ 0x70
 8002c92:	d01a      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0xa6>
 8002c94:	2b70      	cmp	r3, #112	@ 0x70
 8002c96:	d87b      	bhi.n	8002d90 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b60      	cmp	r3, #96	@ 0x60
 8002c9a:	d050      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x11a>
 8002c9c:	2b60      	cmp	r3, #96	@ 0x60
 8002c9e:	d877      	bhi.n	8002d90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b50      	cmp	r3, #80	@ 0x50
 8002ca2:	d03c      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0xfa>
 8002ca4:	2b50      	cmp	r3, #80	@ 0x50
 8002ca6:	d873      	bhi.n	8002d90 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b40      	cmp	r3, #64	@ 0x40
 8002caa:	d058      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x13a>
 8002cac:	2b40      	cmp	r3, #64	@ 0x40
 8002cae:	d86f      	bhi.n	8002d90 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b30      	cmp	r3, #48	@ 0x30
 8002cb2:	d064      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x15a>
 8002cb4:	2b30      	cmp	r3, #48	@ 0x30
 8002cb6:	d86b      	bhi.n	8002d90 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d060      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x15a>
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d867      	bhi.n	8002d90 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d05c      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x15a>
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d05a      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x15a>
 8002cc8:	e062      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cda:	f000 f97c 	bl	8002fd6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002cec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	609a      	str	r2, [r3, #8]
      break;
 8002cf6:	e04f      	b.n	8002d98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d08:	f000 f965 	bl	8002fd6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d1a:	609a      	str	r2, [r3, #8]
      break;
 8002d1c:	e03c      	b.n	8002d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f000 f8dc 	bl	8002ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2150      	movs	r1, #80	@ 0x50
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 f933 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002d3c:	e02c      	b.n	8002d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f000 f8fa 	bl	8002f44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2160      	movs	r1, #96	@ 0x60
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f923 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002d5c:	e01c      	b.n	8002d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f000 f8bc 	bl	8002ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2140      	movs	r1, #64	@ 0x40
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 f913 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002d7c:	e00c      	b.n	8002d98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f000 f90a 	bl	8002fa2 <TIM_ITRx_SetConfig>
      break;
 8002d8e:	e003      	b.n	8002d98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      break;
 8002d94:	e000      	b.n	8002d98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8002edc <TIM_Base_SetConfig+0xd0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <TIM_Base_SetConfig+0x30>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e2a:	d007      	beq.n	8002e3c <TIM_Base_SetConfig+0x30>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee0 <TIM_Base_SetConfig+0xd4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_Base_SetConfig+0x30>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee4 <TIM_Base_SetConfig+0xd8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d108      	bne.n	8002e4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a22      	ldr	r2, [pc, #136]	@ (8002edc <TIM_Base_SetConfig+0xd0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <TIM_Base_SetConfig+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e5c:	d007      	beq.n	8002e6e <TIM_Base_SetConfig+0x62>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee0 <TIM_Base_SetConfig+0xd4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_Base_SetConfig+0x62>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee4 <TIM_Base_SetConfig+0xd8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8002edc <TIM_Base_SetConfig+0xd0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d103      	bne.n	8002eb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f023 0201 	bic.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	611a      	str	r2, [r3, #16]
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	40012c00 	.word	0x40012c00
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800

08002ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f023 0201 	bic.w	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f023 030a 	bic.w	r3, r3, #10
 8002f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f023 0210 	bic.w	r2, r3, #16
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	031b      	lsls	r3, r3, #12
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	621a      	str	r2, [r3, #32]
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f043 0307 	orr.w	r3, r3, #7
 8002fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b087      	sub	sp, #28
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ff0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	021a      	lsls	r2, r3, #8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	609a      	str	r2, [r3, #8]
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003028:	2302      	movs	r3, #2
 800302a:	e046      	b.n	80030ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a16      	ldr	r2, [pc, #88]	@ (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003078:	d009      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a12      	ldr	r2, [pc, #72]	@ (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a10      	ldr	r2, [pc, #64]	@ (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10c      	bne.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4313      	orrs	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40012c00 	.word	0x40012c00
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800

080030d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e042      	b.n	800318c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd ffb4 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	@ 0x24
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fcd5 	bl	8003ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800314c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800315c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800316c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	4613      	mov	r3, r2
 80031a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d112      	bne.n	80031d4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_UART_Receive_IT+0x26>
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00b      	b.n	80031d6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 fab7 	bl	800373e <UART_Start_Receive_IT>
 80031d0:	4603      	mov	r3, r0
 80031d2:	e000      	b.n	80031d6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b0ba      	sub	sp, #232	@ 0xe8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800321e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10f      	bne.n	8003246 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_UART_IRQHandler+0x66>
 8003232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fb93 	bl	800396a <UART_Receive_IT>
      return;
 8003244:	e25b      	b.n	80036fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80de 	beq.w	800340c <HAL_UART_IRQHandler+0x22c>
 8003250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d106      	bne.n	800326a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800325c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003260:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80d1 	beq.w	800340c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_UART_IRQHandler+0xae>
 8003276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_UART_IRQHandler+0xd2>
 800329a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	f043 0202 	orr.w	r2, r3, #2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_UART_IRQHandler+0xf6>
 80032be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f043 0204 	orr.w	r2, r3, #4
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d011      	beq.n	8003306 <HAL_UART_IRQHandler+0x126>
 80032e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fe:	f043 0208 	orr.w	r2, r3, #8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 81f2 	beq.w	80036f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_UART_IRQHandler+0x14e>
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fb1e 	bl	800396a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <HAL_UART_IRQHandler+0x17a>
 8003352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d04f      	beq.n	80033fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa28 	bl	80037b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d041      	beq.n	80033f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3314      	adds	r3, #20
 8003374:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003384:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800338c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3314      	adds	r3, #20
 8003396:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800339a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800339e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1d9      	bne.n	800336e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d013      	beq.n	80033ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c6:	4a7e      	ldr	r2, [pc, #504]	@ (80035c0 <HAL_UART_IRQHandler+0x3e0>)
 80033c8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fa44 	bl	800185c <HAL_DMA_Abort_IT>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d016      	beq.n	8003408 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033e4:	4610      	mov	r0, r2
 80033e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e8:	e00e      	b.n	8003408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f993 	bl	8003716 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f0:	e00a      	b.n	8003408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f98f 	bl	8003716 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f8:	e006      	b.n	8003408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f98b 	bl	8003716 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003406:	e175      	b.n	80036f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	bf00      	nop
    return;
 800340a:	e173      	b.n	80036f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003410:	2b01      	cmp	r3, #1
 8003412:	f040 814f 	bne.w	80036b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8148 	beq.w	80036b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8141 	beq.w	80036b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80b6 	beq.w	80035c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003464:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8145 	beq.w	80036f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003476:	429a      	cmp	r2, r3
 8003478:	f080 813e 	bcs.w	80036f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003482:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b20      	cmp	r3, #32
 800348c:	f000 8088 	beq.w	80035a0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034bc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1d9      	bne.n	8003490 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3314      	adds	r3, #20
 80034e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3314      	adds	r3, #20
 80034fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003500:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003504:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003508:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800350c:	e841 2300 	strex	r3, r2, [r1]
 8003510:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003512:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e1      	bne.n	80034dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3314      	adds	r3, #20
 800351e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003528:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800352a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800352e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3314      	adds	r3, #20
 8003538:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800353c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800353e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003542:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800354a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e3      	bne.n	8003518 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800356e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003570:	f023 0310 	bic.w	r3, r3, #16
 8003574:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	330c      	adds	r3, #12
 800357e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003582:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003584:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003588:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800358a:	e841 2300 	strex	r3, r2, [r1]
 800358e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1e3      	bne.n	800355e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe f923 	bl	80017e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	4619      	mov	r1, r3
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8b6 	bl	8003728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035bc:	e09c      	b.n	80036f8 <HAL_UART_IRQHandler+0x518>
 80035be:	bf00      	nop
 80035c0:	08003875 	.word	0x08003875
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 808e 	beq.w	80036fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8089 	beq.w	80036fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	330c      	adds	r3, #12
 80035f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f4:	e853 3f00 	ldrex	r3, [r3]
 80035f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003600:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800360e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003610:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003612:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800361c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1e3      	bne.n	80035ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3314      	adds	r3, #20
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	623b      	str	r3, [r7, #32]
   return(result);
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3314      	adds	r3, #20
 8003642:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003646:	633a      	str	r2, [r7, #48]	@ 0x30
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800364c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e3      	bne.n	8003622 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	330c      	adds	r3, #12
 800366e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	60fb      	str	r3, [r7, #12]
   return(result);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0310 	bic.w	r3, r3, #16
 800367e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800368c:	61fa      	str	r2, [r7, #28]
 800368e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	69b9      	ldr	r1, [r7, #24]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	617b      	str	r3, [r7, #20]
   return(result);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e3      	bne.n	8003668 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f83b 	bl	8003728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036b2:	e023      	b.n	80036fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d009      	beq.n	80036d4 <HAL_UART_IRQHandler+0x4f4>
 80036c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f8e5 	bl	800389c <UART_Transmit_IT>
    return;
 80036d2:	e014      	b.n	80036fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00e      	beq.n	80036fe <HAL_UART_IRQHandler+0x51e>
 80036e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f924 	bl	800393a <UART_EndTransmit_IT>
    return;
 80036f2:	e004      	b.n	80036fe <HAL_UART_IRQHandler+0x51e>
    return;
 80036f4:	bf00      	nop
 80036f6:	e002      	b.n	80036fe <HAL_UART_IRQHandler+0x51e>
      return;
 80036f8:	bf00      	nop
 80036fa:	e000      	b.n	80036fe <HAL_UART_IRQHandler+0x51e>
      return;
 80036fc:	bf00      	nop
  }
}
 80036fe:	37e8      	adds	r7, #232	@ 0xe8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	4613      	mov	r3, r2
 800374a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	88fa      	ldrh	r2, [r7, #6]
 8003756:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2222      	movs	r2, #34	@ 0x22
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003782:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b095      	sub	sp, #84	@ 0x54
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	330c      	adds	r3, #12
 80037d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e5      	bne.n	80037b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3314      	adds	r3, #20
 80037f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3314      	adds	r3, #20
 800380a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800380c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800380e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e5      	bne.n	80037ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	2b01      	cmp	r3, #1
 8003826:	d119      	bne.n	800385c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	60bb      	str	r3, [r7, #8]
   return(result);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f023 0310 	bic.w	r3, r3, #16
 800383e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003848:	61ba      	str	r2, [r7, #24]
 800384a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6979      	ldr	r1, [r7, #20]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	613b      	str	r3, [r7, #16]
   return(result);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e5      	bne.n	8003828 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800386a:	bf00      	nop
 800386c:	3754      	adds	r7, #84	@ 0x54
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7ff ff41 	bl	8003716 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003894:	bf00      	nop
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b21      	cmp	r3, #33	@ 0x21
 80038ae:	d13e      	bne.n	800392e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b8:	d114      	bne.n	80038e4 <UART_Transmit_IT+0x48>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d110      	bne.n	80038e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	1c9a      	adds	r2, r3, #2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	621a      	str	r2, [r3, #32]
 80038e2:	e008      	b.n	80038f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	1c59      	adds	r1, r3, #1
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6211      	str	r1, [r2, #32]
 80038ee:	781a      	ldrb	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29b      	uxth	r3, r3
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	4619      	mov	r1, r3
 8003904:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10f      	bne.n	800392a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003918:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003928:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003950:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fed2 	bl	8003704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b08c      	sub	sp, #48	@ 0x30
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b22      	cmp	r3, #34	@ 0x22
 800397c:	f040 80ae 	bne.w	8003adc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003988:	d117      	bne.n	80039ba <UART_Receive_IT+0x50>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d113      	bne.n	80039ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b2:	1c9a      	adds	r2, r3, #2
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80039b8:	e026      	b.n	8003a08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039cc:	d007      	beq.n	80039de <UART_Receive_IT+0x74>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <UART_Receive_IT+0x82>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	e008      	b.n	80039fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4619      	mov	r1, r3
 8003a16:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d15d      	bne.n	8003ad8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0220 	bic.w	r2, r2, #32
 8003a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d135      	bne.n	8003ace <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	613b      	str	r3, [r7, #16]
   return(result);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f023 0310 	bic.w	r3, r3, #16
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	330c      	adds	r3, #12
 8003a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a88:	623a      	str	r2, [r7, #32]
 8003a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	69f9      	ldr	r1, [r7, #28]
 8003a8e:	6a3a      	ldr	r2, [r7, #32]
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d10a      	bne.n	8003ac0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff fe2e 	bl	8003728 <HAL_UARTEx_RxEventCallback>
 8003acc:	e002      	b.n	8003ad4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd f894 	bl	8000bfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e002      	b.n	8003ade <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3730      	adds	r7, #48	@ 0x30
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003b22:	f023 030c 	bic.w	r3, r3, #12
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bfc <UART_SetConfig+0x114>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d103      	bne.n	8003b58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7fe fc76 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	e002      	b.n	8003b5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b58:	f7fe fc5e 	bl	8002418 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009a      	lsls	r2, r3, #2
 8003b68:	441a      	add	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	4a22      	ldr	r2, [pc, #136]	@ (8003c00 <UART_SetConfig+0x118>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	0119      	lsls	r1, r3, #4
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009a      	lsls	r2, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b94:	4b1a      	ldr	r3, [pc, #104]	@ (8003c00 <UART_SetConfig+0x118>)
 8003b96:	fba3 0302 	umull	r0, r3, r3, r2
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2064      	movs	r0, #100	@ 0x64
 8003b9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	3332      	adds	r3, #50	@ 0x32
 8003ba8:	4a15      	ldr	r2, [pc, #84]	@ (8003c00 <UART_SetConfig+0x118>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb4:	4419      	add	r1, r3
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009a      	lsls	r2, r3, #2
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <UART_SetConfig+0x118>)
 8003bce:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2064      	movs	r0, #100	@ 0x64
 8003bd6:	fb00 f303 	mul.w	r3, r0, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	3332      	adds	r3, #50	@ 0x32
 8003be0:	4a07      	ldr	r2, [pc, #28]	@ (8003c00 <UART_SetConfig+0x118>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	440a      	add	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40013800 	.word	0x40013800
 8003c00:	51eb851f 	.word	0x51eb851f

08003c04 <memset>:
 8003c04:	4603      	mov	r3, r0
 8003c06:	4402      	add	r2, r0
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <memset+0xa>
 8003c0c:	4770      	bx	lr
 8003c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c12:	e7f9      	b.n	8003c08 <memset+0x4>

08003c14 <strncpy>:
 8003c14:	4603      	mov	r3, r0
 8003c16:	b510      	push	{r4, lr}
 8003c18:	3901      	subs	r1, #1
 8003c1a:	b132      	cbz	r2, 8003c2a <strncpy+0x16>
 8003c1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003c20:	3a01      	subs	r2, #1
 8003c22:	f803 4b01 	strb.w	r4, [r3], #1
 8003c26:	2c00      	cmp	r4, #0
 8003c28:	d1f7      	bne.n	8003c1a <strncpy+0x6>
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	441a      	add	r2, r3
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d100      	bne.n	8003c34 <strncpy+0x20>
 8003c32:	bd10      	pop	{r4, pc}
 8003c34:	f803 1b01 	strb.w	r1, [r3], #1
 8003c38:	e7f9      	b.n	8003c2e <strncpy+0x1a>
	...

08003c3c <__libc_init_array>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	2600      	movs	r6, #0
 8003c40:	4d0c      	ldr	r5, [pc, #48]	@ (8003c74 <__libc_init_array+0x38>)
 8003c42:	4c0d      	ldr	r4, [pc, #52]	@ (8003c78 <__libc_init_array+0x3c>)
 8003c44:	1b64      	subs	r4, r4, r5
 8003c46:	10a4      	asrs	r4, r4, #2
 8003c48:	42a6      	cmp	r6, r4
 8003c4a:	d109      	bne.n	8003c60 <__libc_init_array+0x24>
 8003c4c:	f000 f81a 	bl	8003c84 <_init>
 8003c50:	2600      	movs	r6, #0
 8003c52:	4d0a      	ldr	r5, [pc, #40]	@ (8003c7c <__libc_init_array+0x40>)
 8003c54:	4c0a      	ldr	r4, [pc, #40]	@ (8003c80 <__libc_init_array+0x44>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	42a6      	cmp	r6, r4
 8003c5c:	d105      	bne.n	8003c6a <__libc_init_array+0x2e>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c64:	4798      	blx	r3
 8003c66:	3601      	adds	r6, #1
 8003c68:	e7ee      	b.n	8003c48 <__libc_init_array+0xc>
 8003c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6e:	4798      	blx	r3
 8003c70:	3601      	adds	r6, #1
 8003c72:	e7f2      	b.n	8003c5a <__libc_init_array+0x1e>
 8003c74:	080044d4 	.word	0x080044d4
 8003c78:	080044d4 	.word	0x080044d4
 8003c7c:	080044d4 	.word	0x080044d4
 8003c80:	080044d8 	.word	0x080044d8

08003c84 <_init>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr

08003c90 <_fini>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr
